# search.py
# ---------
# Licensing Information:  You are free to use or extend these projects for
# educational purposes provided that (1) you do not distribute or publish
# solutions, (2) you retain this notice, and (3) you provide clear
# attribution to UC Berkeley, including a link to http://ai.berkeley.edu.
# 
# Attribution Information: The Pacman AI projects were developed at UC Berkeley.
# The core projects and autograders were primarily created by John DeNero
# (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
# Student side autograding was added by Brad Miller, Nick Hay, and
# Pieter Abbeel (pabbeel@cs.berkeley.edu).


"""
In search.py, you will implement generic search algorithms which are called by
Pacman agents (in searchAgents.py).
"""

import util
import random

population1 = [(11, 6), (11, 7), (11, 6), (11, 7), (11, 6), (10, 6), (11, 6), (12, 6), (11, 6), (11, 7), (11, 6), (11, 7), (11, 8), (11, 7), (11, 8), (11, 7), (11, 8), (10, 8), (11, 8), (11, 7), (11
, 8), (10, 8), (11, 8), (10, 8), (9, 8), (10, 8), (9, 8), (10, 8), (11, 8), (11, 7), (11, 6), (10, 6), (9, 6), (10, 6), (11, 6), (10, 6), (11, 6), (10, 6), (9, 6), (8, 6), (9, 6), (8,
6), (9, 6), (8, 6), (7, 6), (8, 6), (9, 6), (10, 6), (9, 6), (8, 6), (9, 6), (8, 6), (7, 6), (8, 6), (7, 6), (6, 6), (7, 6), (6, 6), (6, 5), (6, 6), (7, 6), (8, 6), (9, 6), (10, 6), (11, 6), (10, 6), (11, 6), (10, 6), (9, 6), (10, 6), (11, 6), (11, 7), (11, 8), (11, 7), (11, 6), (12, 6), (11, 6), (10, 6), (9, 6), (8, 6), (9, 6), (10, 6), (11, 6), (11, 7), (11, 6), (
11, 7), (11, 6), (11, 7), (11, 8), (11, 7), (11, 6), (11, 7), (11, 6), (12, 6), (13, 6), (12, 6), (11, 6), (12, 6), (13, 6), (12, 6), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (12,
6), (13, 6), (12, 6), (11, 6), (10, 6), (11, 6), (12, 6), (11, 6), (11, 7), (11, 8), (11, 7), (11, 8), (10, 8), (11, 8), (11, 7), (11, 6), (10, 6), (11, 6), (12, 6), (13, 6), (13, 5),
(13, 4), (12, 4), (12, 3), (12, 4), (11, 4), (12, 4), (13, 4), (14, 4), (13, 4), (12, 4), (13, 4), (13, 5), (13, 4), (13, 5), (13, 6), (13, 5), (13, 6), (13, 5), (13, 4), (12, 4), (13,
 4), (13, 5), (13, 6), (13, 5), (13, 6), (12, 6), (13, 6), (13, 5), (13, 4), (13, 5), (13, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (13, 5), (13, 4), (13, 5), (13, 6),
 (13, 7), (13, 8), (13, 7), (13, 6), (12, 6), (13, 6), (13, 7), (13, 6), (13, 7), (13, 6), (12, 6), (13, 6), (13, 7), (13, 6), (13, 7), (13, 6), (13, 5), (13, 4), (12, 4), (12, 3), (12
, 2), (12, 3), (12, 2), (13, 2), (13, 1), (14, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (18, 1), (17, 1), (18, 1), (17, 1), (16, 1), (15, 1), (16, 1), (17, 1)
, (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (19, 1), (18, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (13, 2), (13, 1), (14, 1), (13, 1), (13, 2), (13, 1), (14, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (17, 1), (18, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (16, 1), (15, 1), (14, 1), (13, 1), (14, 1), (15, 1), (16, 1
), (17, 1), (18, 1), (17, 1), (18, 1), (19, 1), (20, 1), (19, 1), (18, 1), (17, 1), (18, 1), (17, 1), (16, 1), (15, 1), (16, 1), (15, 1), (14, 1), (13, 1), (13, 2), (12, 2), (12, 3), (
12, 4), (13, 4), (14, 4), (15, 4), (16, 4), (15, 4), (16, 4), (16, 5), (16, 4), (16, 5), (16, 4), (16, 3), (17, 3), (16, 3), (16, 4), (15, 4), (16, 4), (16, 5), (16, 6), (15, 6), (16,
6), (15, 6), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (17, 6), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (17, 6), (16, 6), (16, 5), (16, 6), (15, 6), (16, 6),
(16, 5), (16, 4), (15, 4), (14, 4), (13, 4), (12, 4), (13, 4), (14, 4), (15, 4), (16, 4), (16, 5), (16, 6), (17, 6), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (17,
 6), (18, 6), (17, 6), (18, 6), (17, 6), (16, 6), (16, 5), (16, 4), (16, 5), (16, 6), (17, 6), (16, 6), (16, 5), (16, 6), (17, 6), (16, 6), (15, 6), (16, 6), (17, 6), (18, 6), (17, 6),
 (16, 6), (15, 6), (16, 6), (17, 6), (16, 6), (16, 5), (16, 4), (15, 4), (16, 4), (16, 3), (16, 4), (15, 4), (14, 4), (15, 4), (16, 4), (16, 3), (16, 4), (16, 5), (16, 4), (15, 4), (16
, 4), (16, 3), (16, 4), (15, 4), (14, 4), (15, 4), (14, 4), (15, 4), (16, 4), (16, 5), (16, 4), (16, 5), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (16, 5), (16, 4), (16, 5), (16, 4)
, (16, 5), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (16, 5), (16, 4), (16, 3), (16, 4), (16, 5), (16, 4), (16, 3), (17, 3), (18, 3), (18, 4), (19, 4), (20, 4), (19, 4), (18, 4), (19, 4), (20, 4), (20, 3), (20, 2), (20, 1), (20, 2), (20, 1), (20, 2), (20, 1), (20, 2), (20, 1), (20, 2), (20, 1), (20, 2), (20, 3), (20, 4), (20, 3), (20, 4), (20, 3), (20, 4), (19, 4
), (18, 4), (18, 3), (17, 3), (18, 3), (17, 3), (18, 3), (18, 4), (19, 4), (20, 4), (20, 3), (20, 4), (19, 4), (18, 4), (18, 3), (17, 3), (16, 3), (16, 4), (16, 5), (16, 6), (17, 6), (
16, 6), (16, 5), (16, 6), (15, 6), (16, 6), (16, 5), (16, 6), (15, 6), (16, 6), (16, 5), (16, 6), (15, 6), (16, 6), (16, 5), (16, 6), (15, 6), (16, 6), (16, 5), (16, 4), (16, 5), (16,
4), (15, 4), (14, 4), (15, 4), (14, 4), (13, 4), (14, 4), (13, 4), (14, 4), (13, 4), (14, 4), (13, 4), (13, 5), (13, 6), (12, 6), (13, 6), (13, 5), (13, 4), (13, 5), (13, 4), (13, 5),
(13, 6), (12, 6), (11, 6), (11, 7), (11, 6), (10, 6), (9, 6), (10, 6), (9, 6), (8, 6), (7, 6), (8, 6), (9, 6), (10, 6), (11, 6), (12, 6), (11, 6), (10, 6), (11, 6), (10, 6), (9, 6), (10, 6), (9, 6), (10, 6), (9, 6), (10, 6), (11, 6), (10, 6), (9, 6), (8, 6), (9, 6), (8, 6), (7, 6), (8, 6), (9, 6), (8, 6), (7, 6), (8, 6), (7, 6), (6, 6), (6, 5), (6, 4), (6, 5), (6, 6
), (6, 5), (6, 6), (6, 5), (6, 4), (6, 5), (6, 4), (6, 5), (6, 4), (6, 5), (6, 4), (6, 3), (7, 3), (6, 3), (5, 3), (6, 3), (6, 4), (6, 5), (6, 4), (6, 5), (6, 6), (7, 6), (8, 6), (7, 6
), (6, 6), (7, 6), (8, 6), (7, 6), (6, 6), (6, 5), (6, 4), (6, 5), (6, 4), (6, 5), (6, 6), (7, 6), (8, 6), (7, 6), (8, 6), (9, 6), (8, 6), (9, 6), (10, 6), (9, 6), (10, 6), (11, 6), (12, 6), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (13, 5), (13, 6), (13, 7), (13, 6), (13, 5), (13, 4), (12, 4), (13, 4), (12, 4), (13, 4), (12, 4), (12, 3), (12, 2), (11, 2), (10, 2
), (10, 1), (10, 2), (11, 2), (10, 2), (10, 1), (9, 1), (10, 1), (10, 2), (11, 2), (10, 2), (11, 2), (12, 2), (12, 3), (12, 4), (11, 4), (10, 4), (11, 4), (10, 4), (11, 4), (12, 4), (13, 4), (13, 5), (13, 6), (13, 5), (13, 4), (12, 4), (12, 3), (12, 4), (13, 4), (13, 5), (13, 6), (13, 5), (13, 6), (13, 5), (13, 6), (12, 6), (11, 6), (12, 6), (13, 6), (13, 7), (13, 6
), (12, 6), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (13, 5), (13, 6), (13, 7), (13, 6), (13, 5), (13, 4), (13, 5), (13, 6), (13, 5), (13, 4), (14, 4), (15, 4), (16, 4), (16, 5), (
16, 4), (15, 4), (16, 4), (16, 3), (16, 4), (16, 5), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (16, 5), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (17, 6), (16,
6), (17, 6), (16, 6), (17, 6), (18, 6), (19, 6), (20, 6), (19, 6), (20, 6), (20, 7), (20, 8), (19, 8), (20, 8), (20, 7), (20, 6), (19, 6), (20, 6), (19, 6), (20, 6), (20, 7), (20, 8),
(20, 7), (20, 6), (20, 7), (20, 6), (19, 6), (20, 6), (19, 6), (20, 6), (19, 6), (18, 6), (19, 6), (18, 6), (19, 6), (20, 6), (20, 7), (20, 8), (19, 8), (18, 8), (19, 8), (20, 8), (20,
 7), (20, 8), (19, 8), (18, 8), (17, 8), (18, 8), (19, 8), (18, 8), (17, 8), (18, 8), (19, 8), (20, 8), (20, 7), (20, 8), (20, 7), (20, 8), (19, 8), (18, 8), (17, 8), (18, 8), (19, 8),
 (18, 8), (19, 8), (18, 8), (19, 8), (20, 8), (19, 8), (20, 8), (20, 7), (20, 6), (20, 7), (20, 6), (19, 6), (18, 6), (17, 6), (18, 6), (19, 6), (18, 6), (19, 6), (18, 6), (17, 6), (16
, 6), (16, 5), (16, 6), (15, 6), (16, 6), (16, 5), (16, 4), (15, 4), (16, 4), (16, 3), (16, 4), (16, 5), (16, 6), (15, 6), (16, 6), (17, 6), (16, 6), (16, 5), (16, 4), (16, 5), (16, 4)
, (16, 5), (16, 4), (16, 5), (16, 6), (16, 5), (16, 6), (16, 5), (16, 4), (16, 5), (16, 6), (17, 6), (18, 6), (19, 6), (18, 6), (17, 6), (18, 6), (17, 6), (16, 6), (17, 6), (16, 6), (17, 6), (16, 6), (17, 6), (18, 6), (17, 6), (16, 6), (16, 5), (16, 4), (16, 5), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (16, 5), (16, 6), (17, 6), (18, 6), (19, 6), (20, 6), (19, 6
), (18, 6), (19, 6), (18, 6), (17, 6), (18, 6), (19, 6), (20, 6), (19, 6), (18, 6), (17, 6), (18, 6), (17, 6), (18, 6), (17, 6), (18, 6), (17, 6), (16, 6), (17, 6), (16, 6), (17, 6), (
16, 6), (17, 6), (16, 6), (15, 6), (16, 6), (17, 6), (18, 6), (17, 6), (18, 6), (19, 6), (18, 6), (17, 6), (18, 6), (17, 6), (16, 6), (17, 6), (16, 6), (16, 5), (16, 6), (15, 6), (16,
6), (16, 5), (16, 4), (16, 5), (16, 6), (17, 6), (16, 6), (15, 6), (16, 6), (17, 6), (18, 6), (17, 6), (18, 6), (17, 6), (16, 6), (17, 6), (16, 6), (17, 6), (16, 6), (15, 6), (16, 6),
(17, 6), (18, 6), (17, 6), (16, 6), (16, 5), (16, 4), (16, 3), (16, 4), (15, 4), (14, 4), (13, 4), (12, 4), (13, 4), (14, 4), (13, 4), (14, 4), (13, 4), (12, 4), (12, 3), (12, 2), (13,
 2), (12, 2), (12, 3), (12, 4), (11, 4), (12, 4), (11, 4), (10, 4), (9, 4), (10, 4), (11, 4), (12, 4), (13, 4), (12, 4), (12, 3), (12, 4), (12, 3), (12, 4), (11, 4), (12, 4), (11, 4),
(10, 4), (9, 4), (10, 4), (9, 4), (10, 4), (9, 4), (10, 4), (11, 4), (10, 4), (11, 4), (12, 4), (12, 3), (12, 2), (12, 3), (12, 2), (13, 2), (12, 2), (11, 2), (12, 2), (11, 2), (10, 2)
, (10, 1), (10, 2), (10, 1), (10, 2), (11, 2), (12, 2), (11, 2), (12, 2), (12, 3), (12, 2), (11, 2), (10, 2), (10, 1), (10, 2), (11, 2), (10, 2), (11, 2), (10, 2), (11, 2), (12, 2), (13, 2), (12, 2), (12, 3), (12, 4), (13, 4), (13, 5), (13, 4), (13, 5), (13, 6), (13, 7), (13, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (12, 6), (13, 6), (13, 5), (13, 4
), (14, 4), (15, 4), (14, 4), (15, 4), (16, 4), (15, 4), (14, 4), (13, 4), (12, 4), (13, 4), (13, 5), (13, 4), (12, 4), (12, 3), (12, 4), (11, 4), (12, 4), (12, 3), (12, 2), (11, 2), (
10, 2), (10, 1), (10, 2), (10, 1), (10, 2), (10, 1), (9, 1), (10, 1), (9, 1), (8, 1), (7, 1), (6, 1), (7, 1), (8, 1), (7, 1), (8, 1), (9, 1), (8, 1), (7, 1), (6, 1), (5, 1), (6, 1), (7, 1), (6, 1), (5, 1), (6, 1), (5, 1), (6, 1), (7, 1), (8, 1), (7, 1), (6, 1), (5, 1), (6, 1), (5, 1), (4, 1), (3, 1), (2, 1), (3, 1), (4, 1), (3, 1), (2, 1), (1, 1)]

population2 = [(11, 6), (10, 6), (11, 6), (10, 6), (11, 6), (12, 6), (13, 6), (13, 5), (13, 6), (13, 7), (13, 6), (13, 7), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (13, 5), (13, 6), (13, 7), (13
, 6), (12, 6), (13, 6), (13, 5), (13, 6), (13, 5), (13, 4), (14, 4), (15, 4), (16, 4), (16, 5), (16, 6), (17, 6), (18, 6), (19, 6), (18, 6), (17, 6), (18, 6), (17, 6), (18, 6), (17, 6)
, (18, 6), (19, 6), (20, 6), (19, 6), (18, 6), (19, 6), (18, 6), (17, 6), (18, 6), (19, 6), (20, 6), (20, 7), (20, 8), (19, 8), (20, 8), (19, 8), (18, 8), (17, 8), (16, 8), (15, 8), (16, 8), (15, 8), (16, 8), (17, 8), (18, 8), (17, 8), (18, 8), (19, 8), (18, 8), (17, 8), (16, 8), (15, 8), (16, 8), (15, 8), (16, 8), (17, 8), (16, 8), (17, 8), (18, 8), (17, 8), (18, 8
), (19, 8), (20, 8), (20, 7), (20, 6), (20, 7), (20, 6), (20, 7), (20, 6), (20, 7), (20, 6), (20, 7), (20, 8), (20, 7), (20, 8), (19, 8), (18, 8), (19, 8), (20, 8), (20, 7), (20, 8), (
19, 8), (20, 8), (19, 8), (18, 8), (19, 8), (18, 8), (17, 8), (18, 8), (19, 8), (18, 8), (19, 8), (18, 8), (19, 8), (20, 8), (19, 8), (18, 8), (17, 8), (18, 8), (19, 8), (20, 8), (19,
8), (20, 8), (20, 7), (20, 6), (20, 7), (20, 6), (19, 6), (18, 6), (17, 6), (18, 6), (19, 6), (18, 6), (19, 6), (20, 6), (19, 6), (18, 6), (19, 6), (20, 6), (19, 6), (20, 6), (19, 6),
(18, 6), (19, 6), (20, 6), (20, 7), (20, 8), (19, 8), (20, 8), (19, 8), (18, 8), (17, 8), (16, 8), (15, 8), (16, 8), (17, 8), (18, 8), (19, 8), (18, 8), (19, 8), (20, 8), (20, 7), (20,
 8), (20, 7), (20, 8), (20, 7), (20, 8), (20, 7), (20, 8), (20, 7), (20, 6), (20, 7), (20, 8), (19, 8), (18, 8), (19, 8), (20, 8), (20, 7), (20, 6), (19, 6), (18, 6), (19, 6), (18, 6),
 (19, 6), (18, 6), (19, 6), (18, 6), (17, 6), (16, 6), (16, 5), (16, 4), (16, 3), (16, 4), (16, 3), (17, 3), (16, 3), (16, 4), (16, 5), (16, 4), (16, 5), (16, 4), (15, 4), (16, 4), (15
, 4), (14, 4), (15, 4), (16, 4), (15, 4), (14, 4), (13, 4), (12, 4), (13, 4), (14, 4), (15, 4), (16, 4), (16, 3), (16, 4), (16, 3), (17, 3), (16, 3), (16, 4), (16, 3), (16, 4), (15, 4)
, (16, 4), (15, 4), (16, 4), (15, 4), (16, 4), (15, 4), (14, 4), (13, 4), (14, 4), (13, 4), (14, 4), (15, 4), (16, 4), (16, 5), (16, 4), (16, 3), (16, 4), (16, 3), (17, 3), (18, 3), (18, 4), (19, 4), (20, 4), (20, 3), (20, 2), (20, 3), (20, 2), (20, 3), (20, 2), (20, 3), (20, 2), (20, 3), (20, 4), (19, 4), (18, 4), (19, 4), (20, 4), (20, 3), (20, 4), (20, 3), (20, 2
), (20, 1), (20, 2), (20, 1), (19, 1), (18, 1), (19, 1), (20, 1), (20, 2), (20, 1), (20, 2), (20, 3), (20, 2), (20, 3), (20, 2), (20, 1), (19, 1), (20, 1), (19, 1), (20, 1), (20, 2), (
20, 1), (19, 1), (18, 1), (17, 1), (18, 1), (19, 1), (18, 1), (17, 1), (18, 1), (19, 1), (18, 1), (17, 1), (16, 1), (17, 1), (16, 1), (17, 1), (18, 1), (17, 1), (18, 1), (17, 1), (16,
1), (15, 1), (16, 1), (17, 1), (16, 1), (15, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (17, 1), (16, 1), (15, 1), (16, 1), (17, 1), (16, 1), (17, 1), (16, 1), (15, 1), (16, 1),
(17, 1), (18, 1), (19, 1), (18, 1), (17, 1), (18, 1), (17, 1), (16, 1), (15, 1), (16, 1), (15, 1), (14, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (16, 1), (17, 1), (16, 1), (15,
 1), (14, 1), (15, 1), (14, 1), (15, 1), (16, 1), (15, 1), (16, 1), (15, 1), (14, 1), (13, 1), (14, 1), (13, 1), (13, 2), (12, 2), (11, 2), (12, 2), (12, 3), (12, 2), (12, 3), (12, 2),
 (11, 2), (10, 2), (10, 1), (10, 2), (11, 2), (10, 2), (11, 2), (10, 2), (11, 2), (10, 2), (10, 1), (9, 1), (8, 1), (7, 1), (6, 1), (5, 1), (6, 1), (7, 1), (8, 1), (7, 1), (6, 1), (5,
1), (4, 1), (5, 1), (4, 1), (5, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (7, 1), (8, 1), (7, 1), (8, 1), (9, 1), (8, 1), (7, 1), (6, 1), (7, 1), (6, 1), (5, 1), (4, 1), (3, 1), (2, 1), (3, 1), (2, 1), (3, 1), (4, 1), (3, 1), (2, 1), (1, 1)]

population3 = [(11, 6), (12, 6), (11, 6), (12, 6), (13, 6), (13, 5), (13, 4), (12, 4), (13, 4), (13, 5), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (13, 5), (13, 4), (13, 5), (13, 4), (13, 5), (13
, 6), (13, 7), (13, 6), (12, 6), (13, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (13, 5), (13, 6), (13, 5), (13, 4), (14, 4), (13, 4), (13, 5), (13, 4), (12, 4), (12, 3)
, (12, 2), (11, 2), (10, 2), (11, 2), (12, 2), (13, 2), (12, 2), (11, 2), (12, 2), (11, 2), (12, 2), (13, 2), (12, 2), (11, 2), (12, 2), (13, 2), (12, 2), (11, 2), (10, 2), (10, 1), (9
, 1), (8, 1), (9, 1), (8, 1), (7, 1), (8, 1), (9, 1), (10, 1), (10, 2), (11, 2), (12, 2), (12, 3), (12, 4), (13, 4), (14, 4), (13, 4), (13, 5), (13, 4), (12, 4), (11, 4), (10, 4), (11,
 4), (10, 4), (9, 4), (10, 4), (11, 4), (10, 4), (9, 4), (8, 4), (8, 3), (8, 4), (9, 4), (8, 4), (8, 3), (7, 3), (8, 3), (8, 4), (8, 3), (8, 4), (8, 3), (7, 3), (8, 3), (7, 3), (8, 3),
 (7, 3), (6, 3), (7, 3), (8, 3), (7, 3), (8, 3), (7, 3), (6, 3), (5, 3), (4, 3), (3, 3), (4, 3), (3, 3), (4, 3), (5, 3), (4, 3), (5, 3), (6, 3), (7, 3), (8, 3), (7, 3), (8, 3), (7, 3),
 (8, 3), (7, 3), (6, 3), (5, 3), (4, 3), (3, 3), (2, 3), (1, 3), (2, 3), (3, 3), (2, 3), (3, 3), (4, 3), (3, 3), (4, 3), (3, 3), (2, 3), (1, 3), (1, 4), (1, 3), (1, 4), (1, 3), (1, 4),
 (1, 5), (2, 5), (1, 5), (1, 4), (1, 3), (1, 4), (1, 3), (2, 3), (1, 3), (1, 4), (1, 3), (1, 4), (1, 3), (1, 4), (1, 3), (2, 3), (3, 3), (4, 3), (3, 3), (4, 3), (5, 3), (6, 3), (5, 3),
 (4, 3), (5, 3), (6, 3), (5, 3), (6, 3), (6, 4), (6, 3), (5, 3), (6, 3), (7, 3), (8, 3), (7, 3), (8, 3), (7, 3), (8, 3), (7, 3), (8, 3), (7, 3), (6, 3), (5, 3), (6, 3), (7, 3), (6, 3),
 (7, 3), (8, 3), (8, 4), (8, 3), (7, 3), (8, 3), (7, 3), (8, 3), (7, 3), (8, 3), (8, 4), (8, 3), (7, 3), (6, 3), (5, 3), (4, 3), (5, 3), (6, 3), (5, 3), (6, 3), (5, 3), (4, 3), (3, 3),
 (4, 3), (3, 3), (4, 3), (3, 3), (4, 3), (3, 3), (2, 3), (3, 3), (4, 3), (5, 3), (4, 3), (3, 3), (4, 3), (3, 3), (2, 3), (1, 3), (1, 4), (1, 3), (1, 4), (1, 3), (1, 4), (1, 5), (2, 5),
 (3, 5), (4, 5), (3, 5), (2, 5), (1, 5), (2, 5), (1, 5), (1, 4), (1, 3), (2, 3), (1, 3), (2, 3), (1, 3), (2, 3), (3, 3), (2, 3), (1, 3), (2, 3), (3, 3), (4, 3), (3, 3), (4, 3), (3, 3),
 (2, 3), (1, 3), (2, 3), (3, 3), (4, 3), (5, 3), (4, 3), (3, 3), (4, 3), (3, 3), (2, 3), (3, 3), (2, 3), (3, 3), (2, 3), (3, 3), (4, 3), (5, 3), (4, 3), (5, 3), (6, 3), (7, 3), (6, 3),
 (5, 3), (6, 3), (5, 3), (6, 3), (6, 4), (6, 3), (6, 4), (6, 3), (6, 4), (6, 3), (5, 3), (4, 3), (5, 3), (4, 3), (5, 3), (6, 3), (6, 4), (6, 3), (6, 4), (6, 3), (5, 3), (4, 3), (3, 3),
 (2, 3), (3, 3), (2, 3), (3, 3), (4, 3), (3, 3), (4, 3), (3, 3), (2, 3), (3, 3), (4, 3), (5, 3), (6, 3), (7, 3), (8, 3), (8, 4), (9, 4), (10, 4), (9, 4), (10, 4), (9, 4), (8, 4), (9, 4
), (8, 4), (8, 3), (7, 3), (8, 3), (8, 4), (8, 3), (7, 3), (8, 3), (8, 4), (8, 3), (7, 3), (6, 3), (5, 3), (6, 3), (6, 4), (6, 5), (6, 4), (6, 3), (7, 3), (8, 3), (7, 3), (6, 3), (5, 3
), (6, 3), (7, 3), (8, 3), (7, 3), (6, 3), (7, 3), (6, 3), (5, 3), (6, 3), (6, 4), (6, 5), (6, 4), (6, 5), (6, 6), (6, 5), (6, 6), (7, 6), (6, 6), (6, 5), (6, 6), (7, 6), (8, 6), (9, 6
), (10, 6), (9, 6), (10, 6), (11, 6), (10, 6), (9, 6), (10, 6), (11, 6), (10, 6), (11, 6), (12, 6), (11, 6), (12, 6), (13, 6), (13, 5), (13, 6), (12, 6), (13, 6), (13, 7), (13, 6), (12
, 6), (13, 6), (12, 6), (13, 6), (12, 6), (13, 6), (13, 5), (13, 4), (13, 5), (13, 4), (13, 5), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (13, 5), (13, 4), (12, 4), (11, 4), (12, 4)
, (13, 4), (12, 4), (12, 3), (12, 4), (13, 4), (14, 4), (15, 4), (14, 4), (13, 4), (12, 4), (13, 4), (13, 5), (13, 6), (12, 6), (11, 6), (10, 6), (11, 6), (12, 6), (13, 6), (12, 6), (11, 6), (11, 7), (11, 6), (12, 6), (11, 6), (10, 6), (9, 6), (10, 6), (9, 6), (10, 6), (11, 6), (12, 6), (11, 6), (11, 7), (11, 6), (12, 6), (13, 6), (12, 6), (11, 6), (11, 7), (11, 6),
 (10, 6), (11, 6), (10, 6), (9, 6), (10, 6), (11, 6), (11, 7), (11, 8), (10, 8), (9, 8), (8, 8), (7, 8), (8, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (11, 7), (11, 8), (10, 8), (11, 8), (11, 7), (11, 8), (10, 8), (9, 8), (10, 8), (9, 8), (10, 8), (9, 8), (10, 8), (9, 8), (8, 8), (9, 8), (8, 8), (9, 8), (10, 8), (11, 8), (10, 8), (11, 8), (10, 8), (9, 8), (8, 8)
, (9, 8), (10, 8), (11, 8), (10, 8), (9, 8), (8, 8), (7, 8), (8, 8), (9, 8), (10, 8), (9, 8), (10, 8), (9, 8), (8, 8), (9, 8), (10, 8), (9, 8), (8, 8), (7, 8), (8, 8), (7, 8), (6, 8),
(5, 8), (6, 8), (7, 8), (6, 8), (7, 8), (6, 8), (5, 8), (4, 8), (4, 7), (4, 8), (4, 7), (3, 7), (2, 7), (3, 7), (4, 7), (4, 8), (5, 8), (6, 8), (7, 8), (6, 8), (5, 8), (4, 8), (5, 8),
(6, 8), (5, 8), (4, 8), (5, 8), (4, 8), (4, 7), (4, 8), (5, 8), (4, 8), (5, 8), (6, 8), (7, 8), (6, 8), (5, 8), (4, 8), (4, 7), (3, 7), (4, 7), (3, 7), (4, 7), (4, 8), (5, 8), (4, 8),
(5, 8), (6, 8), (5, 8), (4, 8), (5, 8), (4, 8), (4, 7), (3, 7), (2, 7), (3, 7), (4, 7), (4, 8), (4, 7), (3, 7), (4, 7), (4, 8), (5, 8), (6, 8), (7, 8), (6, 8), (7, 8), (8, 8), (7, 8),
(6, 8), (7, 8), (8, 8), (7, 8), (8, 8), (7, 8), (6, 8), (7, 8), (8, 8), (7, 8), (6, 8), (7, 8), (8, 8), (7, 8), (6, 8), (7, 8), (6, 8), (5, 8), (4, 8), (4, 7), (3, 7), (2, 7), (3, 7),
(2, 7), (1, 7), (1, 8), (1, 7), (1, 8), (1, 7), (2, 7), (1, 7), (2, 7), (3, 7), (4, 7), (4, 8), (4, 7), (4, 8), (5, 8), (6, 8), (5, 8), (4, 8), (5, 8), (4, 8), (5, 8), (6, 8), (5, 8),
(4, 8), (4, 7), (4, 8), (5, 8), (4, 8), (5, 8), (4, 8), (5, 8), (4, 8), (4, 7), (4, 8), (5, 8), (4, 8), (4, 7), (3, 7), (4, 7), (4, 8), (5, 8), (6, 8), (5, 8), (4, 8), (4, 7), (3, 7),
(2, 7), (1, 7), (2, 7), (3, 7), (2, 7), (3, 7), (4, 7), (4, 8), (4, 7), (4, 8), (4, 7), (4, 8), (4, 7), (3, 7), (4, 7), (4, 8), (5, 8), (6, 8), (5, 8), (4, 8), (4, 7), (4, 8), (5, 8),
(6, 8), (7, 8), (8, 8), (9, 8), (8, 8), (7, 8), (8, 8), (9, 8), (8, 8), (9, 8), (8, 8), (9, 8), (8, 8), (9, 8), (10, 8), (9, 8), (10, 8), (9, 8), (10, 8), (11, 8), (10, 8), (11, 8), (10, 8), (11, 8), (11, 7), (11, 8), (11, 7), (11, 6), (11, 7), (11, 6), (11, 7), (11, 8), (11, 7), (11, 8), (10, 8), (9, 8), (10, 8), (9, 8), (10, 8), (11, 8), (10, 8), (9, 8), (10, 8),
(9, 8), (10, 8), (11, 8), (10, 8), (9, 8), (8, 8), (9, 8), (8, 8), (9, 8), (10, 8), (11, 8), (10, 8), (9, 8), (8, 8), (9, 8), (8, 8), (7, 8), (8, 8), (9, 8), (10, 8), (9, 8), (8, 8), (
7, 8), (8, 8), (9, 8), (8, 8), (7, 8), (8, 8), (9, 8), (8, 8), (9, 8), (10, 8), (9, 8), (10, 8), (11, 8), (10, 8), (11, 8), (11, 7), (11, 6), (11, 7), (11, 8), (10, 8), (9, 8), (8, 8),
 (9, 8), (8, 8), (9, 8), (10, 8), (9, 8), (8, 8), (7, 8), (8, 8), (9, 8), (8, 8), (7, 8), (8, 8), (7, 8), (6, 8), (7, 8), (6, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (8, 8), (7, 8)
, (8, 8), (9, 8), (10, 8), (9, 8), (8, 8), (9, 8), (8, 8), (9, 8), (8, 8), (7, 8), (6, 8), (5, 8), (4, 8), (5, 8), (4, 8), (5, 8), (4, 8), (5, 8), (4, 8), (4, 7), (4, 8), (4, 7), (3, 7
), (2, 7), (3, 7), (4, 7), (3, 7), (2, 7), (3, 7), (2, 7), (1, 7), (1, 8), (1, 7), (1, 8), (1, 7), (2, 7), (1, 7), (1, 8), (1, 7), (1, 8), (1, 7), (2, 7), (1, 7), (1, 8), (1, 7), (1, 8
), (1, 7), (1, 8), (1, 7), (2, 7), (1, 7), (2, 7), (1, 7), (1, 8), (1, 7), (1, 8), (1, 7), (1, 8), (1, 7), (2, 7), (1, 7), (2, 7), (1, 7), (1, 8), (1, 7), (1, 8), (1, 7), (2, 7), (1, 7
), (2, 7), (1, 7), (2, 7), (1, 7), (2, 7), (1, 7), (1, 8), (1, 7), (1, 8), (1, 7), (2, 7), (3, 7), (2, 7), (3, 7), (4, 7), (3, 7), (4, 7), (3, 7), (4, 7), (3, 7), (4, 7), (4, 8), (4, 7
), (3, 7), (2, 7), (3, 7), (2, 7), (1, 7), (1, 8), (1, 7), (2, 7), (1, 7), (1, 8), (1, 7), (2, 7), (1, 7), (2, 7), (1, 7), (1, 8), (1, 7), (2, 7), (3, 7), (4, 7), (4, 8), (4, 7), (4, 8
), (4, 7), (3, 7), (4, 7), (4, 8), (4, 7), (3, 7), (4, 7), (3, 7), (4, 7), (4, 8), (5, 8), (6, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (11, 7), (11, 6), (11, 7),
(11, 8), (11, 7), (11, 6), (11, 7), (11, 6), (10, 6), (11, 6), (10, 6), (9, 6), (8, 6), (7, 6), (8, 6), (9, 6), (8, 6), (9, 6), (10, 6), (11, 6), (12, 6), (13, 6), (13, 5), (13, 6), (12, 6), (13, 6), (12, 6), (11, 6), (12, 6), (11, 6), (12, 6), (11, 6), (10, 6), (9, 6), (10, 6), (9, 6), (10, 6), (9, 6), (8, 6), (9, 6), (10, 6), (11, 6), (11, 7), (11, 6), (11, 7), (11, 8), (10, 8), (9, 8), (8, 8), (7, 8), (8, 8), (9, 8), (8, 8), (9, 8), (8, 8), (9, 8), (10, 8), (11, 8), (10, 8), (9, 8), (10, 8), (11, 8), (10, 8), (9, 8), (10, 8), (9, 8), (10, 8),
(11, 8), (11, 7), (11, 8), (11, 7), (11, 8), (11, 7), (11, 8), (11, 7), (11, 8), (11, 7), (11, 8), (10, 8), (11, 8), (10, 8), (11, 8), (10, 8), (9, 8), (8, 8), (9, 8), (10, 8), (11, 8)
, (11, 7), (11, 8), (11, 7), (11, 8), (10, 8), (9, 8), (10, 8), (11, 8), (11, 7), (11, 6), (12, 6), (11, 6), (11, 7), (11, 6), (11, 7), (11, 6), (10, 6), (11, 6), (11, 7), (11, 8), (10
, 8), (11, 8), (11, 7), (11, 8), (11, 7), (11, 8), (11, 7), (11, 8), (10, 8), (11, 8), (11, 7), (11, 8), (11, 7), (11, 8), (10, 8), (11, 8), (11, 7), (11, 6), (12, 6), (13, 6), (13, 5)
, (13, 6), (13, 5), (13, 4), (12, 4), (12, 3), (12, 2), (11, 2), (10, 2), (10, 1), (10, 2), (11, 2), (10, 2), (11, 2), (12, 2), (13, 2), (12, 2), (11, 2), (12, 2), (12, 3), (12, 2), (11, 2), (12, 2), (13, 2), (12, 2), (11, 2), (12, 2), (11, 2), (10, 2), (10, 1), (10, 2), (10, 1), (10, 2), (11, 2), (10, 2), (11, 2), (10, 2), (10, 1), (9, 1), (10, 1), (9, 1), (10, 1),
 (9, 1), (8, 1), (9, 1), (10, 1), (9, 1), (10, 1), (9, 1), (10, 1), (10, 2), (10, 1), (9, 1), (8, 1), (7, 1), (6, 1), (5, 1), (6, 1), (5, 1), (4, 1), (5, 1), (4, 1), (5, 1), (4, 1), (5, 1), (4, 1), (5, 1), (6, 1), (7, 1), (6, 1), (7, 1), (6, 1), (7, 1), (8, 1), (7, 1), (6, 1), (7, 1), (6, 1), (5, 1), (4, 1), (5, 1), (4, 1), (3, 1), (4, 1), (3, 1), (2, 1), (1, 1)]

population4 = [(11, 6), (12, 6), (11, 6), (12, 6), (11, 6), (10, 6), (11, 6), (10, 6), (9, 6), (10, 6), (11, 6), (11, 7), (11, 8), (11, 7), (11, 6), (10, 6), (11, 6), (11, 7), (11, 6), (12, 6), (11,
 6), (10, 6), (11, 6), (11, 7), (11, 8), (10, 8), (11, 8), (10, 8), (11, 8), (10, 8), (9, 8), (8, 8), (9, 8), (8, 8), (9, 8), (8, 8), (9, 8), (8, 8), (7, 8), (8, 8), (7, 8), (6, 8), (7
, 8), (6, 8), (7, 8), (8, 8), (7, 8), (8, 8), (7, 8), (8, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (11, 7), (11, 8), (11, 7), (11, 6), (11, 7), (11, 8), (10, 8), (11, 8), (11, 7),
 (11, 6), (11, 7), (11, 8), (10, 8), (11, 8), (10, 8), (11, 8), (11, 7), (11, 6), (12, 6), (13, 6), (13, 7), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (13, 5), (13, 4), (12, 4), (11
, 4), (10, 4), (11, 4), (10, 4), (9, 4), (10, 4), (11, 4), (10, 4), (9, 4), (8, 4), (9, 4), (8, 4), (9, 4), (8, 4), (9, 4), (10, 4), (11, 4), (12, 4), (11, 4), (10, 4), (11, 4), (10, 4
), (11, 4), (12, 4), (11, 4), (12, 4), (13, 4), (13, 5), (13, 4), (13, 5), (13, 6), (12, 6), (11, 6), (10, 6), (9, 6), (10, 6), (11, 6), (11, 7), (11, 8), (11, 7), (11, 8), (11, 7), (11, 6), (12, 6), (13, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8
), (13, 7), (13, 8), (13, 7), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (12, 6), (11, 6), (10, 6), (11, 6), (12, 6), (11, 6), (11, 7), (11, 6), (12, 6), (11, 6), (12, 6), (13, 6), (
13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (13, 7), (13, 6), (13, 5), (13, 6), (12, 6), (13, 6), (12, 6), (13, 6), (13, 7), (13, 8), (13,
7), (13, 6), (13, 5), (13, 4), (13, 5), (13, 4), (13, 5), (13, 6), (13, 5), (13, 6), (13, 5), (13, 4), (14, 4), (15, 4), (16, 4), (15, 4), (16, 4), (16, 5), (16, 4), (16, 5), (16, 6),
(16, 5), (16, 4), (15, 4), (14, 4), (13, 4), (13, 5), (13, 4), (14, 4), (15, 4), (16, 4), (16, 3), (17, 3), (16, 3), (16, 4), (15, 4), (14, 4), (15, 4), (16, 4), (16, 5), (16, 4), (15,
 4), (16, 4), (15, 4), (14, 4), (15, 4), (16, 4), (16, 3), (16, 4), (15, 4), (16, 4), (16, 3), (17, 3), (18, 3), (18, 4), (18, 3), (18, 4), (19, 4), (20, 4), (20, 3), (20, 2), (20, 3),
 (20, 2), (20, 1), (20, 2), (20, 3), (20, 2), (20, 3), (20, 2), (20, 1), (20, 2), (20, 1), (19, 1), (18, 1), (19, 1), (18, 1), (17, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (19
, 1), (20, 1), (19, 1), (18, 1), (19, 1), (20, 1), (20, 2), (20, 3), (20, 2), (20, 3), (20, 4), (20, 3), (20, 4), (20, 3), (20, 2), (20, 1), (19, 1), (20, 1), (19, 1), (20, 1), (19, 1)
, (18, 1), (17, 1), (18, 1), (19, 1), (18, 1), (19, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (16, 1), (17, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (19, 1), (18, 1), (19, 1), (18, 1), (17, 1), (18, 1), (19, 1), (18, 1), (19, 1), (20, 1), (20, 2), (20, 3), (20, 2), (20, 1), (20, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1
), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (19, 1), (20, 1), (19, 1), (20, 1), (20, 2), (20, 3), (20, 4), (19, 4), (20, 4), (20, 3), (20, 4), (19, 4), (20, 4), (19, 4), (
18, 4), (19, 4), (18, 4), (18, 3), (17, 3), (16, 3), (16, 4), (16, 3), (16, 4), (15, 4), (14, 4), (13, 4), (13, 5), (13, 4), (12, 4), (13, 4), (13, 5), (13, 4), (12, 4), (13, 4), (14,
4), (15, 4), (14, 4), (15, 4), (16, 4), (15, 4), (16, 4), (15, 4), (16, 4), (16, 3), (16, 4), (16, 5), (16, 4), (16, 5), (16, 4), (16, 5), (16, 6), (17, 6), (16, 6), (17, 6), (16, 6),
(15, 6), (16, 6), (16, 5), (16, 6), (16, 5), (16, 6), (16, 5), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (16, 5), (16, 4), (16, 5), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (17,
 6), (16, 6), (16, 5), (16, 6), (15, 6), (16, 6), (17, 6), (16, 6), (17, 6), (18, 6), (19, 6), (18, 6), (19, 6), (20, 6), (20, 7), (20, 6), (20, 7), (20, 8), (19, 8), (20, 8), (19, 8),
 (18, 8), (17, 8), (16, 8), (15, 8), (16, 8), (17, 8), (18, 8), (17, 8), (16, 8), (15, 8), (16, 8), (15, 8), (16, 8), (15, 8), (16, 8), (15, 8), (16, 8), (15, 8), (16, 8), (15, 8), (16
, 8), (15, 8), (16, 8), (17, 8), (16, 8), (17, 8), (16, 8), (17, 8), (16, 8), (17, 8), (18, 8), (19, 8), (20, 8), (20, 7), (20, 8), (19, 8), (18, 8), (17, 8), (18, 8), (17, 8), (18, 8)
, (19, 8), (18, 8), (17, 8), (16, 8), (15, 8), (16, 8), (15, 8), (16, 8), (17, 8), (18, 8), (19, 8), (20, 8), (20, 7), (20, 8), (20, 7), (20, 6), (20, 7), (20, 6), (19, 6), (18, 6), (17, 6), (16, 6), (16, 5), (16, 6), (16, 5), (16, 4), (16, 5), (16, 6), (16, 5), (16, 4), (16, 3), (16, 4), (16, 5), (16, 6), (15, 6), (16, 6), (17, 6), (16, 6), (15, 6), (16, 6), (15, 6
), (16, 6), (16, 5), (16, 6), (17, 6), (18, 6), (19, 6), (20, 6), (19, 6), (20, 6), (19, 6), (20, 6), (19, 6), (20, 6), (20, 7), (20, 8), (20, 7), (20, 8), (19, 8), (20, 8), (20, 7), (
20, 8), (19, 8), (18, 8), (19, 8), (20, 8), (19, 8), (20, 8), (19, 8), (18, 8), (19, 8), (18, 8), (19, 8), (20, 8), (20, 7), (20, 8), (20, 7), (20, 8), (20, 7), (20, 8), (20, 7), (20,
8), (19, 8), (20, 8), (20, 7), (20, 6), (20, 7), (20, 8), (20, 7), (20, 8), (20, 7), (20, 6), (20, 7), (20, 8), (20, 7), (20, 6), (19, 6), (20, 6), (19, 6), (18, 6), (17, 6), (16, 6),
(15, 6), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (16, 5), (16, 4), (15, 4), (14, 4), (15, 4), (16, 4), (15, 4), (14, 4), (13, 4), (14, 4), (13, 4), (12, 4), (11, 4), (10, 4), (11,
 4), (10, 4), (9, 4), (10, 4), (9, 4), (8, 4), (8, 3), (8, 4), (8, 3), (7, 3), (8, 3), (7, 3), (6, 3), (7, 3), (6, 3), (7, 3), (6, 3), (6, 4), (6, 5), (6, 4), (6, 5), (6, 4), (6, 5), (
6, 6), (6, 5), (6, 4), (6, 3), (6, 4), (6, 3), (7, 3), (8, 3), (8, 4), (9, 4), (8, 4), (8, 3), (7, 3), (8, 3), (7, 3), (6, 3), (5, 3), (4, 3), (3, 3), (2, 3), (3, 3), (4, 3), (5, 3), (
6, 3), (7, 3), (8, 3), (8, 4), (9, 4), (10, 4), (11, 4), (10, 4), (11, 4), (12, 4), (13, 4), (12, 4), (13, 4), (13, 5), (13, 6), (13, 7), (13, 6), (13, 5), (13, 6), (12, 6), (11, 6), (
11, 7), (11, 8), (10, 8), (11, 8), (10, 8), (9, 8), (10, 8), (9, 8), (8, 8), (9, 8), (8, 8), (9, 8), (8, 8), (9, 8), (8, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (10, 8), (11, 8),
 (11, 7), (11, 6), (12, 6), (13, 6), (13, 5), (13, 4), (12, 4), (12, 3), (12, 2), (12, 3), (12, 4), (13, 4), (12, 4), (12, 3), (12, 4), (11, 4), (10, 4), (11, 4), (12, 4), (12, 3), (12
, 4), (12, 3), (12, 4), (12, 3), (12, 4), (11, 4), (10, 4), (9, 4), (8, 4), (9, 4), (10, 4), (11, 4), (10, 4), (11, 4), (10, 4), (11, 4), (10, 4), (9, 4), (10, 4), (11, 4), (10, 4), (9
, 4), (8, 4), (9, 4), (10, 4), (11, 4), (10, 4), (11, 4), (12, 4), (11, 4), (12, 4), (13, 4), (12, 4), (12, 3), (12, 2), (12, 3), (12, 4), (11, 4), (12, 4), (13, 4), (14, 4), (15, 4),
(16, 4), (16, 3), (16, 4), (16, 5), (16, 6), (17, 6), (16, 6), (16, 5), (16, 4), (15, 4), (14, 4), (15, 4), (14, 4), (13, 4), (12, 4), (13, 4), (14, 4), (15, 4), (14, 4), (15, 4), (16,
 4), (16, 5), (16, 4), (16, 3), (16, 4), (15, 4), (16, 4), (16, 5), (16, 4), (15, 4), (16, 4), (15, 4), (16, 4), (15, 4), (14, 4), (13, 4), (13, 5), (13, 6), (13, 5), (13, 4), (13, 5),
 (13, 6), (13, 5), (13, 4), (12, 4), (13, 4), (12, 4), (13, 4), (12, 4), (13, 4), (13, 5), (13, 4), (14, 4), (13, 4), (14, 4), (15, 4), (14, 4), (15, 4), (14, 4), (13, 4), (13, 5), (13
, 4), (13, 5), (13, 6), (12, 6), (11, 6), (12, 6), (11, 6), (11, 7), (11, 6), (10, 6), (11, 6), (12, 6), (13, 6), (13, 5), (13, 4), (12, 4), (12, 3), (12, 2), (12, 3), (12, 4), (13, 4)
, (12, 4), (11, 4), (10, 4), (9, 4), (10, 4), (11, 4), (12, 4), (11, 4), (10, 4), (9, 4), (8, 4), (9, 4), (10, 4), (11, 4), (12, 4), (13, 4), (13, 5), (13, 4), (13, 5), (13, 4), (14, 4
), (13, 4), (13, 5), (13, 4), (12, 4), (11, 4), (12, 4), (12, 3), (12, 2), (13, 2), (12, 2), (12, 3), (12, 4), (13, 4), (12, 4), (11, 4), (10, 4), (9, 4), (10, 4), (9, 4), (8, 4), (8,
3), (7, 3), (8, 3), (8, 4), (9, 4), (10, 4), (11, 4), (10, 4), (9, 4), (10, 4), (11, 4), (12, 4), (11, 4), (10, 4), (9, 4), (10, 4), (9, 4), (8, 4), (9, 4), (10, 4), (11, 4), (10, 4),
(11, 4), (12, 4), (12, 3), (12, 4), (12, 3), (12, 4), (11, 4), (10, 4), (9, 4), (10, 4), (9, 4), (8, 4), (8, 3), (8, 4), (9, 4), (10, 4), (9, 4), (8, 4), (8, 3), (7, 3), (6, 3), (5, 3)
, (6, 3), (6, 4), (6, 3), (5, 3), (4, 3), (5, 3), (4, 3), (5, 3), (4, 3), (5, 3), (6, 3), (6, 4), (6, 5), (6, 4), (6, 5), (6, 4), (6, 5), (6, 4), (6, 3), (6, 4), (6, 3), (5, 3), (4, 3)
, (5, 3), (4, 3), (5, 3), (4, 3), (3, 3), (4, 3), (5, 3), (4, 3), (3, 3), (4, 3), (3, 3), (2, 3), (3, 3), (4, 3), (5, 3), (6, 3), (5, 3), (4, 3), (3, 3), (2, 3), (3, 3), (2, 3), (1, 3)
, (1, 4), (1, 3), (1, 4), (1, 3), (1, 4), (1, 5), (2, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (2, 5), (3, 5), (2, 5), (3, 5), (2, 5), (1, 5), (1, 4), (1, 5), (2, 5), (3, 5), (2, 5)
, (3, 5), (2, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (2, 5), (1, 5), (1, 4), (1, 5), (1, 4), (1, 5), (1, 4), (1, 3), (2, 3), (3, 3), (4, 3), (3, 3), (2, 3), (1, 3), (2, 3), (1, 3)
, (1, 4), (1, 5), (2, 5), (3, 5), (2, 5), (1, 5), (2, 5), (1, 5), (1, 4), (1, 3), (2, 3), (3, 3), (2, 3), (3, 3), (4, 3), (5, 3), (4, 3), (3, 3), (2, 3), (1, 3), (1, 4), (1, 5), (2, 5)
, (3, 5), (2, 5), (3, 5), (4, 5), (3, 5), (2, 5), (1, 5), (1, 4), (1, 5), (1, 4), (1, 5), (2, 5), (1, 5), (1, 4), (1, 3), (1, 4), (1, 5), (2, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5)
, (4, 5), (3, 5), (4, 5), (3, 5), (2, 5), (1, 5), (1, 4), (1, 5), (2, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (2, 5)
, (1, 5), (1, 4), (1, 5), (2, 5), (3, 5), (2, 5), (3, 5), (2, 5), (1, 5), (2, 5), (1, 5), (2, 5), (3, 5), (4, 5), (3, 5), (2, 5), (1, 5), (2, 5), (3, 5), (2, 5), (3, 5), (2, 5), (3, 5)
, (4, 5), (3, 5), (2, 5), (1, 5), (1, 4), (1, 5), (1, 4), (1, 5), (1, 4), (1, 5), (1, 4), (1, 5), (1, 4), (1, 3), (1, 4), (1, 5), (1, 4), (1, 5), (2, 5), (1, 5), (2, 5), (3, 5), (4, 5)
, (3, 5), (2, 5), (3, 5), (2, 5), (1, 5), (2, 5), (3, 5), (2, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5)
, (4, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (2, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (2, 5), (1, 5), (1, 4), (1, 3), (1, 4), (1, 5), (1, 4), (1, 5), (1, 4)
, (1, 3), (2, 3), (1, 3), (2, 3), (3, 3), (2, 3), (1, 3), (1, 4), (1, 3), (1, 4), (1, 5), (2, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (2, 5), (3, 5)
, (2, 5), (1, 5), (1, 4), (1, 3), (2, 3), (1, 3), (2, 3), (3, 3), (2, 3), (3, 3), (2, 3), (3, 3), (2, 3), (1, 3), (1, 4), (1, 5), (1, 4), (1, 5), (1, 4), (1, 5), (2, 5), (3, 5), (2, 5)
, (1, 5), (2, 5), (3, 5), (2, 5), (1, 5), (2, 5), (1, 5), (2, 5), (1, 5), (1, 4), (1, 5), (1, 4), (1, 3), (2, 3), (1, 3), (2, 3), (3, 3), (2, 3), (3, 3), (4, 3), (3, 3), (4, 3), (5, 3)
, (4, 3), (5, 3), (4, 3), (3, 3), (4, 3), (5, 3), (4, 3), (5, 3), (4, 3), (5, 3), (4, 3), (3, 3), (4, 3), (5, 3), (6, 3), (7, 3), (8, 3), (8, 4), (9, 4), (8, 4), (9, 4), (8, 4), (9, 4)
, (8, 4), (9, 4), (8, 4), (9, 4), (10, 4), (11, 4), (10, 4), (11, 4), (12, 4), (11, 4), (10, 4), (9, 4), (8, 4), (8, 3), (8, 4), (9, 4), (10, 4), (9, 4), (8, 4), (9, 4), (10, 4), (11,
4), (10, 4), (9, 4), (8, 4), (8, 3), (7, 3), (8, 3), (7, 3), (8, 3), (8, 4), (8, 3), (7, 3), (8, 3), (7, 3), (6, 3), (5, 3), (6, 3), (5, 3), (4, 3), (5, 3), (6, 3), (6, 4), (6, 5), (6,
 6), (6, 5), (6, 4), (6, 5), (6, 6), (6, 5), (6, 6), (7, 6), (8, 6), (9, 6), (10, 6), (11, 6), (11, 7), (11, 6), (11, 7), (11, 8), (11, 7), (11, 6), (10, 6), (9, 6), (8, 6), (9, 6), (10, 6), (11, 6), (12, 6), (13, 6), (13, 5), (13, 4), (14, 4), (13, 4), (13, 5), (13, 4), (12, 4), (13, 4), (13, 5), (13, 6), (13, 5), (13, 6), (13, 5), (13, 4), (12, 4), (11, 4), (10, 4
), (11, 4), (10, 4), (11, 4), (12, 4), (13, 4), (13, 5), (13, 6), (13, 5), (13, 6), (13, 5), (13, 4), (13, 5), (13, 4), (14, 4), (13, 4), (13, 5), (13, 4), (14, 4), (13, 4), (14, 4), (
15, 4), (14, 4), (15, 4), (14, 4), (15, 4), (14, 4), (13, 4), (14, 4), (13, 4), (12, 4), (12, 3), (12, 2), (12, 3), (12, 4), (11, 4), (12, 4), (12, 3), (12, 2), (12, 3), (12, 4), (12,
3), (12, 2), (13, 2), (12, 2), (13, 2), (12, 2), (11, 2), (12, 2), (12, 3), (12, 4), (13, 4), (12, 4), (11, 4), (10, 4), (11, 4), (10, 4), (11, 4), (12, 4), (13, 4), (14, 4), (13, 4),
(14, 4), (13, 4), (13, 5), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (13, 5), (13, 6), (13, 5), (13, 6), (12, 6), (13, 6), (12, 6), (13, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13,
 7), (13, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (12, 6), (13, 6), (12, 6), (13, 6), (13, 5), (13, 6), (13, 5), (13, 6), (13, 5), (13, 4), (13, 5),
 (13, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13
, 6), (12, 6), (13, 6), (12, 6), (11, 6), (11, 7), (11, 6), (12, 6), (13, 6), (13, 7), (13, 6), (13, 5), (13, 6), (13, 5), (13, 4), (12, 4), (13, 4), (12, 4), (12, 3), (12, 2), (11, 2)
, (10, 2), (10, 1), (9, 1), (8, 1), (7, 1), (6, 1), (5, 1), (6, 1), (5, 1), (4, 1), (5, 1), (4, 1), (5, 1), (4, 1), (3, 1), (4, 1), (3, 1), (4, 1), (5, 1), (6, 1), (5, 1), (6, 1), (5,
1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (10, 2), (10, 1), (10, 2), (10, 1), (9, 1), (10, 1), (10, 2), (11, 2), (10, 2), (10, 1), (9, 1), (8, 1), (9, 1), (8, 1), (7, 1), (8, 1), (7
, 1), (6, 1), (7, 1), (6, 1), (5, 1), (6, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (8, 1), (9, 1), (10, 1), (10, 2), (10, 1), (10, 2), (11, 2), (12, 2), (13, 2), (13, 1), (13, 2), (
13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (17, 1), (16, 1), (15, 1), (16, 1), (15, 1), (14, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (19,
1), (18, 1), (19, 1), (18, 1), (19, 1), (20, 1), (19, 1), (20, 1), (20, 2), (20, 1), (19, 1), (20, 1), (20, 2), (20, 1), (19, 1), (20, 1), (19, 1), (20, 1), (19, 1), (20, 1), (20, 2),
(20, 1), (20, 2), (20, 3), (20, 4), (20, 3), (20, 2), (20, 3), (20, 4), (19, 4), (20, 4), (19, 4), (20, 4), (19, 4), (20, 4), (19, 4), (18, 4), (19, 4), (20, 4), (20, 3), (20, 4), (20,
 3), (20, 4), (19, 4), (18, 4), (18, 3), (18, 4), (18, 3), (17, 3), (18, 3), (18, 4), (18, 3), (18, 4), (19, 4), (18, 4), (18, 3), (17, 3), (16, 3), (16, 4), (16, 5), (16, 4), (15, 4),
 (14, 4), (13, 4), (12, 4), (13, 4), (13, 5), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (13, 7), (13, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (12, 6), (13, 6), (13
, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (13, 7), (13, 6), (12, 6), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (13, 7)
, (13, 6), (13, 5), (13, 6), (12, 6), (11, 6), (10, 6), (11, 6), (10, 6), (11, 6), (11, 7), (11, 6), (11, 7), (11, 6), (12, 6), (13, 6), (12, 6), (13, 6), (12, 6), (13, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (13, 5), (13, 4), (12, 4), (13, 4), (12, 4), (13, 4), (13, 5), (13, 4), (13, 5), (13, 4), (12, 4), (11, 4), (12, 4), (11, 4), (10, 4), (9, 4)
, (8, 4), (9, 4), (8, 4), (9, 4), (8, 4), (9, 4), (8, 4), (9, 4), (8, 4), (8, 3), (8, 4), (9, 4), (10, 4), (9, 4), (8, 4), (9, 4), (8, 4), (9, 4), (8, 4), (8, 3), (8, 4), (9, 4), (10,
4), (9, 4), (8, 4), (9, 4), (10, 4), (11, 4), (12, 4), (11, 4), (12, 4), (13, 4), (14, 4), (13, 4), (14, 4), (13, 4), (12, 4), (11, 4), (10, 4), (11, 4), (10, 4), (9, 4), (10, 4), (9,
4), (8, 4), (8, 3), (7, 3), (8, 3), (8, 4), (9, 4), (8, 4), (8, 3), (8, 4), (9, 4), (10, 4), (11, 4), (10, 4), (11, 4), (12, 4), (12, 3), (12, 4), (11, 4), (10, 4), (9, 4), (10, 4), (11, 4), (10, 4), (9, 4), (10, 4), (9, 4), (8, 4), (8, 3), (7, 3), (8, 3), (8, 4), (8, 3), (7, 3), (6, 3), (6, 4), (6, 3), (6, 4), (6, 5), (6, 4), (6, 3), (5, 3), (4, 3), (5, 3), (6, 3),
 (6, 4), (6, 3), (7, 3), (8, 3), (7, 3), (6, 3), (7, 3), (8, 3), (8, 4), (9, 4), (10, 4), (9, 4), (8, 4), (8, 3), (8, 4), (9, 4), (8, 4), (8, 3), (8, 4), (9, 4), (8, 4), (9, 4), (10, 4
), (11, 4), (12, 4), (13, 4), (14, 4), (15, 4), (14, 4), (15, 4), (14, 4), (13, 4), (12, 4), (13, 4), (12, 4), (13, 4), (13, 5), (13, 4), (12, 4), (13, 4), (14, 4), (15, 4), (14, 4), (
13, 4), (14, 4), (15, 4), (16, 4), (16, 3), (17, 3), (16, 3), (16, 4), (15, 4), (14, 4), (13, 4), (12, 4), (12, 3), (12, 2), (12, 3), (12, 4), (12, 3), (12, 2), (13, 2), (13, 1), (13,
2), (12, 2), (13, 2), (13, 1), (13, 2), (13, 1), (13, 2), (12, 2), (11, 2), (12, 2), (12, 3), (12, 2), (13, 2), (13, 1), (14, 1), (15, 1), (14, 1), (13, 1), (13, 2), (12, 2), (12, 3),
(12, 4), (12, 3), (12, 2), (13, 2), (13, 1), (13, 2), (13, 1), (14, 1), (13, 1), (13, 2), (13, 1), (14, 1), (15, 1), (16, 1), (15, 1), (14, 1), (15, 1), (14, 1), (15, 1), (14, 1), (15,
 1), (14, 1), (15, 1), (14, 1), (15, 1), (16, 1), (17, 1), (16, 1), (17, 1), (16, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (13, 2), (13, 1), (13, 2), (12, 2), (13, 2), (13, 1),
 (14, 1), (13, 1), (13, 2), (13, 1), (13, 2), (12, 2), (12, 3), (12, 2), (12, 3), (12, 4), (12, 3), (12, 4), (13, 4), (14, 4), (15, 4), (14, 4), (13, 4), (12, 4), (12, 3), (12, 4), (11
, 4), (12, 4), (11, 4), (12, 4), (11, 4), (10, 4), (11, 4), (10, 4), (9, 4), (10, 4), (9, 4), (8, 4), (8, 3), (8, 4), (9, 4), (8, 4), (8, 3), (8, 4), (9, 4), (10, 4), (11, 4), (10, 4),
 (11, 4), (10, 4), (11, 4), (10, 4), (9, 4), (10, 4), (11, 4), (10, 4), (11, 4), (10, 4), (9, 4), (8, 4), (8, 3), (8, 4), (9, 4), (8, 4), (9, 4), (10, 4), (9, 4), (10, 4), (9, 4), (8,
4), (9, 4), (10, 4), (11, 4), (10, 4), (11, 4), (10, 4), (11, 4), (12, 4), (13, 4), (14, 4), (15, 4), (16, 4), (16, 5), (16, 4), (16, 3), (16, 4), (15, 4), (16, 4), (16, 3), (16, 4), (
15, 4), (16, 4), (16, 3), (16, 4), (16, 3), (17, 3), (16, 3), (16, 4), (16, 5), (16, 4), (16, 3), (16, 4), (15, 4), (14, 4), (15, 4), (16, 4), (16, 5), (16, 4), (16, 5), (16, 4), (16,
3), (17, 3), (16, 3), (17, 3), (16, 3), (17, 3), (16, 3), (17, 3), (18, 3), (17, 3), (16, 3), (16, 4), (15, 4), (14, 4), (15, 4), (16, 4), (16, 5), (16, 4), (16, 3), (17, 3), (18, 3),
(17, 3), (16, 3), (17, 3), (18, 3), (18, 4), (18, 3), (18, 4), (18, 3), (17, 3), (18, 3), (17, 3), (16, 3), (17, 3), (16, 3), (16, 4), (16, 5), (16, 6), (16, 5), (16, 4), (16, 3), (17,
 3), (16, 3), (16, 4), (15, 4), (14, 4), (13, 4), (12, 4), (13, 4), (14, 4), (15, 4), (16, 4), (16, 5), (16, 4), (16, 5), (16, 6), (16, 5), (16, 6), (16, 5), (16, 6), (17, 6), (18, 6),
 (19, 6), (20, 6), (20, 7), (20, 8), (19, 8), (20, 8), (20, 7), (20, 6), (19, 6), (18, 6), (19, 6), (18, 6), (17, 6), (18, 6), (19, 6), (20, 6), (20, 7), (20, 6), (20, 7), (20, 8), (19
, 8), (18, 8), (17, 8), (16, 8), (15, 8), (16, 8), (15, 8), (16, 8), (17, 8), (16, 8), (17, 8), (16, 8), (15, 8), (16, 8), (17, 8), (16, 8), (15, 8), (16, 8), (15, 8), (16, 8), (17, 8)
, (18, 8), (19, 8), (18, 8), (17, 8), (18, 8), (19, 8), (18, 8), (17, 8), (18, 8), (19, 8), (20, 8), (19, 8), (20, 8), (19, 8), (20, 8), (19, 8), (20, 8), (19, 8), (18, 8), (19, 8), (18, 8), (17, 8), (18, 8), (17, 8), (18, 8), (19, 8), (18, 8), (17, 8), (18, 8), (19, 8), (20, 8), (20, 7), (20, 6), (19, 6), (18, 6), (19, 6), (20, 6), (19, 6), (20, 6), (19, 6), (18, 6
), (19, 6), (18, 6), (17, 6), (18, 6), (17, 6), (18, 6), (17, 6), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (17, 6), (18, 6), (19, 6), (20, 6), (19, 6), (18, 6), (17, 6), (18, 6), (
19, 6), (18, 6), (17, 6), (18, 6), (19, 6), (18, 6), (17, 6), (16, 6), (16, 5), (16, 6), (16, 5), (16, 4), (16, 5), (16, 4), (16, 5), (16, 4), (15, 4), (14, 4), (13, 4), (13, 5), (13,
4), (12, 4), (12, 3), (12, 2), (13, 2), (13, 1), (14, 1), (13, 1), (13, 2), (12, 2), (13, 2), (12, 2), (11, 2), (10, 2), (10, 1), (9, 1), (10, 1), (9, 1), (10, 1), (10, 2), (11, 2), (12, 2), (13, 2), (12, 2), (12, 3), (12, 4), (13, 4), (14, 4), (13, 4), (13, 5), (13, 6), (12, 6), (11, 6), (10, 6), (9, 6), (8, 6), (7, 6), (6, 6), (7, 6), (6, 6), (6, 5), (6, 6), (6, 5
), (6, 6), (7, 6), (6, 6), (6, 5), (6, 4), (6, 5), (6, 6), (6, 5), (6, 4), (6, 3), (7, 3), (6, 3), (7, 3), (6, 3), (7, 3), (8, 3), (7, 3), (8, 3), (8, 4), (8, 3), (8, 4), (9, 4), (8, 4
), (9, 4), (10, 4), (11, 4), (12, 4), (13, 4), (14, 4), (13, 4), (12, 4), (13, 4), (12, 4), (13, 4), (14, 4), (15, 4), (16, 4), (16, 5), (16, 6), (16, 5), (16, 4), (16, 5), (16, 6), (16, 5), (16, 4), (16, 5), (16, 4), (16, 3), (17, 3), (18, 3), (18, 4), (19, 4), (20, 4), (19, 4), (18, 4), (19, 4), (18, 4), (19, 4), (18, 4), (18, 3), (18, 4), (19, 4), (18, 4), (18, 3
), (17, 3), (18, 3), (17, 3), (18, 3), (18, 4), (18, 3), (17, 3), (18, 3), (18, 4), (18, 3), (18, 4), (18, 3), (17, 3), (18, 3), (17, 3), (18, 3), (18, 4), (18, 3), (17, 3), (18, 3), (
18, 4), (19, 4), (18, 4), (19, 4), (18, 4), (18, 3), (17, 3), (18, 3), (17, 3), (16, 3), (16, 4), (16, 3), (17, 3), (18, 3), (17, 3), (16, 3), (16, 4), (15, 4), (14, 4), (13, 4), (13,
5), (13, 4), (12, 4), (12, 3), (12, 4), (13, 4), (14, 4), (13, 4), (14, 4), (15, 4), (16, 4), (15, 4), (14, 4), (13, 4), (13, 5), (13, 6), (13, 5), (13, 6), (12, 6), (13, 6), (13, 5),
(13, 4), (13, 5), (13, 6), (12, 6), (11, 6), (11, 7), (11, 6), (11, 7), (11, 8), (10, 8), (9, 8), (8, 8), (7, 8), (6, 8), (5, 8), (4, 8), (4, 7), (3, 7), (2, 7), (3, 7), (2, 7), (3, 7)
, (4, 7), (3, 7), (2, 7), (1, 7), (2, 7), (3, 7), (2, 7), (3, 7), (2, 7), (3, 7), (4, 7), (4, 8), (4, 7), (3, 7), (4, 7), (4, 8), (5, 8), (4, 8), (4, 7), (4, 8), (5, 8), (6, 8), (7, 8)
, (6, 8), (5, 8), (6, 8), (7, 8), (6, 8), (5, 8), (6, 8), (5, 8), (6, 8), (7, 8), (6, 8), (7, 8), (6, 8), (7, 8), (8, 8), (7, 8), (8, 8), (7, 8), (8, 8), (7, 8), (6, 8), (5, 8), (6, 8)
, (7, 8), (8, 8), (7, 8), (8, 8), (9, 8), (8, 8), (7, 8), (8, 8), (9, 8), (8, 8), (7, 8), (6, 8), (7, 8), (8, 8), (7, 8), (8, 8), (7, 8), (8, 8), (7, 8), (6, 8), (7, 8), (6, 8), (7, 8)
, (6, 8), (7, 8), (6, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8), (9, 8), (8, 8), (9, 8), (8, 8), (9, 8), (10, 8), (11, 8), (10, 8), (11, 8), (10, 8), (9, 8), (8, 8), (7, 8),
(6, 8), (5, 8), (6, 8), (7, 8), (6, 8), (7, 8), (6, 8), (5, 8), (6, 8), (5, 8), (6, 8), (5, 8), (6, 8), (7, 8), (6, 8), (7, 8), (6, 8), (5, 8), (4, 8), (4, 7), (3, 7), (4, 7), (3, 7),
(4, 7), (4, 8), (4, 7), (3, 7), (4, 7), (4, 8), (4, 7), (4, 8), (5, 8), (6, 8), (5, 8), (4, 8), (4, 7), (4, 8), (5, 8), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (8, 8), (7, 8),
(8, 8), (9, 8), (10, 8), (11, 8), (11, 7), (11, 6), (12, 6), (13, 6), (12, 6), (13, 6), (13, 7), (13, 6), (13, 7), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (13, 7), (13, 8), (13, 7
), (13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (13, 5), (13, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (12, 6), (13, 6), (13, 7), (13, 8), (13, 7), (
13, 6), (12, 6), (11, 6), (11, 7), (11, 8), (11, 7), (11, 6), (12, 6), (13, 6), (12, 6), (11, 6), (12, 6), (13, 6), (13, 5), (13, 6), (13, 7), (13, 6), (13, 5), (13, 6), (13, 7), (13,
8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (13, 7), (13, 6), (13, 5), (13, 6), (13, 5), (13, 6), (13, 5), (13, 6), (13, 7), (13, 6), (13, 7), (13, 6), (13, 7), (13, 6),
(12, 6), (13, 6), (13, 7), (13, 6), (12, 6), (13, 6), (13, 5), (13, 4), (14, 4), (15, 4), (14, 4), (13, 4), (13, 5), (13, 4), (13, 5), (13, 6), (12, 6), (13, 6), (13, 7), (13, 6), (12,
 6), (11, 6), (10, 6), (11, 6), (12, 6), (13, 6), (13, 7), (13, 6), (13, 5), (13, 6), (13, 5), (13, 4), (13, 5), (13, 6), (12, 6), (13, 6), (12, 6), (13, 6), (13, 5), (13, 6), (13, 5),
 (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (12, 6), (13, 6), (12, 6), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (13, 7), (13, 6), (13, 7), (13, 6), (13, 5), (13, 6), (13, 7), (13
, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (13, 7), (13, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (12, 6), (11, 6), (12, 6), (13, 6), (13, 5), (13, 4)
, (12, 4), (13, 4), (14, 4), (13, 4), (13, 5), (13, 4), (14, 4), (15, 4), (14, 4), (15, 4), (16, 4), (15, 4), (16, 4), (15, 4), (14, 4), (13, 4), (12, 4), (13, 4), (14, 4), (13, 4), (13, 5), (13, 6), (12, 6), (13, 6), (12, 6), (13, 6), (13, 5), (13, 6), (12, 6), (11, 6), (10, 6), (9, 6), (10, 6), (11, 6), (12, 6), (11, 6), (10, 6), (9, 6), (8, 6), (7, 6), (8, 6), (9
, 6), (8, 6), (7, 6), (6, 6), (6, 5), (6, 4), (6, 3), (7, 3), (8, 3), (7, 3), (8, 3), (8, 4), (8, 3), (8, 4), (9, 4), (8, 4), (8, 3), (8, 4), (8, 3), (8, 4), (8, 3), (8, 4), (9, 4), (8
, 4), (8, 3), (7, 3), (8, 3), (8, 4), (8, 3), (7, 3), (8, 3), (8, 4), (9, 4), (10, 4), (9, 4), (8, 4), (8, 3), (7, 3), (6, 3), (7, 3), (8, 3), (7, 3), (8, 3), (7, 3), (6, 3), (5, 3), (
6, 3), (5, 3), (4, 3), (5, 3), (4, 3), (5, 3), (6, 3), (7, 3), (6, 3), (5, 3), (6, 3), (7, 3), (8, 3), (7, 3), (8, 3), (8, 4), (8, 3), (7, 3), (8, 3), (8, 4), (8, 3), (8, 4), (8, 3), (
7, 3), (8, 3), (8, 4), (9, 4), (8, 4), (8, 3), (8, 4), (9, 4), (8, 4), (9, 4), (10, 4), (9, 4), (8, 4), (8, 3), (7, 3), (6, 3), (7, 3), (8, 3), (7, 3), (6, 3), (6, 4), (6, 5), (6, 4),
(6, 5), (6, 6), (7, 6), (8, 6), (9, 6), (8, 6), (9, 6), (8, 6), (9, 6), (10, 6), (9, 6), (10, 6), (11, 6), (11, 7), (11, 6), (11, 7), (11, 8), (11, 7), (11, 6), (11, 7), (11, 6), (10,
6), (11, 6), (11, 7), (11, 6), (11, 7), (11, 8), (10, 8), (9, 8), (8, 8), (9, 8), (8, 8), (9, 8), (8, 8), (7, 8), (6, 8), (7, 8), (8, 8), (9, 8), (8, 8), (9, 8), (8, 8), (7, 8), (8, 8)
, (7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (10, 8), (9, 8), (8, 8), (7, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (11, 7), (11, 6), (12, 6), (13, 6), (13, 5), (13, 6), (13
, 7), (13, 6), (13, 7), (13, 6), (13, 5), (13, 4), (13, 5), (13, 4), (12, 4), (12, 3), (12, 2), (11, 2), (10, 2), (10, 1), (10, 2), (11, 2), (10, 2), (11, 2), (10, 2), (10, 1), (9, 1),
 (8, 1), (9, 1), (10, 1), (10, 2), (11, 2), (10, 2), (11, 2), (10, 2), (11, 2), (12, 2), (13, 2), (12, 2), (12, 3), (12, 4), (12, 3), (12, 2), (13, 2), (13, 1), (14, 1), (13, 1), (14,
1), (15, 1), (16, 1), (17, 1), (16, 1), (17, 1), (18, 1), (17, 1), (16, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (13, 2), (13, 1), (13, 2), (13, 1), (13, 2), (13, 1), (13, 2),
(13, 1), (13, 2), (13, 1), (13, 2), (12, 2), (13, 2), (12, 2), (12, 3), (12, 2), (13, 2), (12, 2), (12, 3), (12, 2), (13, 2), (13, 1), (13, 2), (12, 2), (13, 2), (13, 1), (13, 2), (12,
 2), (11, 2), (10, 2), (10, 1), (10, 2), (11, 2), (10, 2), (11, 2), (12, 2), (13, 2), (12, 2), (12, 3), (12, 2), (13, 2), (13, 1), (13, 2), (12, 2), (11, 2), (10, 2), (10, 1), (9, 1),
(8, 1), (9, 1), (8, 1), (9, 1), (8, 1), (7, 1), (6, 1), (7, 1), (6, 1), (5, 1), (6, 1), (5, 1), (4, 1), (5, 1), (6, 1), (5, 1), (6, 1), (7, 1), (6, 1), (5, 1), (6, 1), (7, 1), (8, 1),
(9, 1), (8, 1), (9, 1), (8, 1), (7, 1), (8, 1), (7, 1), (6, 1), (7, 1), (8, 1), (7, 1), (6, 1), (5, 1), (4, 1), (5, 1), (6, 1), (5, 1), (6, 1), (5, 1), (4, 1), (5, 1), (6, 1), (7, 1),
(8, 1), (7, 1), (6, 1), (7, 1), (6, 1), (7, 1), (8, 1), (9, 1), (8, 1), (7, 1), (8, 1), (7, 1), (6, 1), (7, 1), (6, 1), (7, 1), (6, 1), (7, 1), (6, 1), (5, 1), (4, 1), (3, 1), (2, 1), (1, 1)]

population5 = [(11, 6), (12, 6), (13, 6), (12, 6), (11, 6), (11, 7), (11, 8), (11, 7), (11, 8), (11, 7), (11, 8), (11, 7), (11, 6), (11, 7), (11, 8), (10, 8), (9, 8), (10, 8), (11, 8), (11, 7), (11,
 6), (11, 7), (11, 6), (11, 7), (11, 8), (10, 8), (11, 8), (10, 8), (11, 8), (10, 8), (9, 8), (10, 8), (11, 8), (10, 8), (9, 8), (10, 8), (9, 8), (10, 8), (9, 8), (10, 8), (11, 8), (11
, 7), (11, 6), (10, 6), (9, 6), (8, 6), (7, 6), (8, 6), (7, 6), (6, 6), (7, 6), (6, 6), (7, 6), (6, 6), (7, 6), (8, 6), (9, 6), (8, 6), (7, 6), (8, 6), (7, 6), (8, 6), (7, 6), (6, 6),
(7, 6), (8, 6), (7, 6), (8, 6), (9, 6), (10, 6), (9, 6), (8, 6), (9, 6), (10, 6), (11, 6), (12, 6), (13, 6), (12, 6), (11, 6), (12, 6), (13, 6), (12, 6), (13, 6), (13, 7), (13, 6), (13
, 5), (13, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (13, 7), (13, 6), (13, 5), (13, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7)
, (13, 8), (13, 7), (13, 6), (12, 6), (13, 6), (13, 5), (13, 6), (13, 7), (13, 6), (13, 7), (13, 6), (13, 5), (13, 4), (12, 4), (12, 3), (12, 4), (12, 3), (12, 4), (13, 4), (13, 5), (13, 6), (13, 7), (13, 6), (13, 5), (13, 6), (12, 6), (11, 6), (10, 6), (11, 6), (12, 6), (11, 6), (10, 6), (9, 6), (8, 6), (7, 6), (6, 6), (6, 5), (6, 6), (6, 5), (6, 6), (7, 6), (8, 6)
, (7, 6), (8, 6), (9, 6), (10, 6), (9, 6), (8, 6), (7, 6), (8, 6), (9, 6), (10, 6), (9, 6), (10, 6), (9, 6), (8, 6), (9, 6), (8, 6), (7, 6), (6, 6), (6, 5), (6, 4), (6, 5), (6, 6), (7,
 6), (6, 6), (7, 6), (6, 6), (6, 5), (6, 6), (6, 5), (6, 4), (6, 3), (5, 3), (4, 3), (3, 3), (4, 3), (3, 3), (2, 3), (3, 3), (2, 3), (3, 3), (2, 3), (1, 3), (2, 3), (3, 3), (2, 3), (1,
 3), (1, 4), (1, 3), (1, 4), (1, 3), (1, 4), (1, 3), (2, 3), (1, 3), (2, 3), (3, 3), (2, 3), (3, 3), (2, 3), (1, 3), (2, 3), (3, 3), (4, 3), (3, 3), (2, 3), (1, 3), (2, 3), (3, 3), (4,
 3), (3, 3), (4, 3), (5, 3), (6, 3), (6, 4), (6, 5), (6, 6), (6, 5), (6, 4), (6, 3), (6, 4), (6, 5), (6, 4), (6, 3), (5, 3), (6, 3), (5, 3), (4, 3), (5, 3), (4, 3), (3, 3), (4, 3), (3,
 3), (2, 3), (1, 3), (2, 3), (3, 3), (2, 3), (3, 3), (2, 3), (1, 3), (2, 3), (1, 3), (2, 3), (3, 3), (4, 3), (5, 3), (6, 3), (5, 3), (6, 3), (6, 4), (6, 5), (6, 4), (6, 5), (6, 4), (6,
 5), (6, 4), (6, 3), (6, 4), (6, 3), (5, 3), (4, 3), (3, 3), (2, 3), (3, 3), (4, 3), (3, 3), (2, 3), (1, 3), (1, 4), (1, 3), (1, 4), (1, 5), (2, 5), (3, 5), (2, 5), (1, 5), (2, 5), (3,
 5), (2, 5), (3, 5), (4, 5), (3, 5), (2, 5), (3, 5), (2, 5), (1, 5), (1, 4), (1, 5), (1, 4), (1, 3), (2, 3), (1, 3), (2, 3), (1, 3), (2, 3), (3, 3), (4, 3), (3, 3), (4, 3), (3, 3), (4,
 3), (5, 3), (6, 3), (5, 3), (4, 3), (3, 3), (4, 3), (3, 3), (4, 3), (3, 3), (2, 3), (3, 3), (4, 3), (3, 3), (4, 3), (3, 3), (2, 3), (3, 3), (4, 3), (3, 3), (2, 3), (1, 3), (2, 3), (1,
 3), (1, 4), (1, 5), (1, 4), (1, 5), (1, 4), (1, 3), (2, 3), (1, 3), (1, 4), (1, 5), (1, 4), (1, 5), (1, 4), (1, 5), (2, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (2, 5), (3, 5), (4,
 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (2, 5), (1, 5), (1, 4), (1, 5), (1, 4), (1, 5), (2, 5), (3, 5), (4, 5), (3, 5), (2, 5), (1,
 5), (1, 4), (1, 5), (1, 4), (1, 5), (2, 5), (3, 5), (2, 5), (1, 5), (1, 4), (1, 5), (2, 5), (3, 5), (2, 5), (1, 5), (2, 5), (1, 5), (2, 5), (3, 5), (4, 5), (3, 5), (2, 5), (3, 5), (4,
 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (2, 5), (3, 5), (2, 5), (1, 5), (1, 4), (1, 3), (2, 3), (1, 3), (2, 3), (3, 3), (2, 3), (1, 3), (2, 3), (1, 3), (1, 4), (1,
 3), (1, 4), (1, 3), (1, 4), (1, 5), (1, 4), (1, 5), (2, 5), (3, 5), (4, 5), (3, 5), (2, 5), (1, 5), (1, 4), (1, 3), (1, 4), (1, 3), (1, 4), (1, 5), (1, 4), (1, 5), (2, 5), (1, 5), (2,
 5), (3, 5), (2, 5), (1, 5), (2, 5), (3, 5), (4, 5), (3, 5), (2, 5), (1, 5), (1, 4), (1, 3), (2, 3), (3, 3), (4, 3), (3, 3), (4, 3), (3, 3), (2, 3), (3, 3), (4, 3), (5, 3), (4, 3), (5,
 3), (6, 3), (6, 4), (6, 3), (6, 4), (6, 5), (6, 6), (6, 5), (6, 4), (6, 3), (7, 3), (8, 3), (8, 4), (9, 4), (8, 4), (9, 4), (10, 4), (11, 4), (10, 4), (9, 4), (10, 4), (11, 4), (10, 4
), (11, 4), (12, 4), (12, 3), (12, 4), (11, 4), (10, 4), (11, 4), (12, 4), (12, 3), (12, 2), (12, 3), (12, 2), (12, 3), (12, 2), (13, 2), (13, 1), (14, 1), (13, 1), (14, 1), (13, 1), (
13, 2), (12, 2), (13, 2), (12, 2), (11, 2), (12, 2), (13, 2), (12, 2), (13, 2), (12, 2), (12, 3), (12, 4), (12, 3), (12, 2), (12, 3), (12, 4), (12, 3), (12, 4), (12, 3), (12, 2), (12,
3), (12, 2), (13, 2), (13, 1), (14, 1), (15, 1), (16, 1), (15, 1), (14, 1), (13, 1), (13, 2), (12, 2), (12, 3), (12, 4), (11, 4), (12, 4), (11, 4), (10, 4), (9, 4), (10, 4), (9, 4), (10, 4), (9, 4), (10, 4), (11, 4), (10, 4), (11, 4), (10, 4), (11, 4), (12, 4), (13, 4), (12, 4), (12, 3), (12, 4), (13, 4), (13, 5), (13, 4), (13, 5), (13, 4), (12, 4), (11, 4), (10, 4)
, (9, 4), (10, 4), (11, 4), (10, 4), (9, 4), (10, 4), (9, 4), (8, 4), (9, 4), (8, 4), (9, 4), (10, 4), (11, 4), (12, 4), (13, 4), (14, 4), (15, 4), (14, 4), (15, 4), (16, 4), (16, 3),
(17, 3), (18, 3), (17, 3), (16, 3), (16, 4), (15, 4), (14, 4), (13, 4), (13, 5), (13, 4), (12, 4), (13, 4), (14, 4), (15, 4), (16, 4), (16, 5), (16, 6), (15, 6), (16, 6), (17, 6), (18,
 6), (19, 6), (18, 6), (19, 6), (20, 6), (19, 6), (18, 6), (19, 6), (20, 6), (20, 7), (20, 6), (20, 7), (20, 8), (20, 7), (20, 8), (19, 8), (18, 8), (19, 8), (18, 8), (17, 8), (16, 8),
 (17, 8), (18, 8), (19, 8), (20, 8), (20, 7), (20, 6), (19, 6), (18, 6), (19, 6), (20, 6), (19, 6), (18, 6), (17, 6), (16, 6), (15, 6), (16, 6), (16, 5), (16, 6), (17, 6), (18, 6), (19
, 6), (18, 6), (17, 6), (16, 6), (15, 6), (16, 6), (17, 6), (18, 6), (19, 6), (18, 6), (19, 6), (20, 6), (19, 6), (18, 6), (19, 6), (20, 6), (19, 6), (20, 6), (19, 6), (20, 6), (20, 7)
, (20, 8), (19, 8), (20, 8), (19, 8), (20, 8), (19, 8), (20, 8), (19, 8), (20, 8), (19, 8), (18, 8), (19, 8), (20, 8), (20, 7), (20, 6), (19, 6), (20, 6), (20, 7), (20, 6), (20, 7), (20, 8), (19, 8), (20, 8), (20, 7), (20, 6), (20, 7), (20, 8), (20, 7), (20, 8), (20, 7), (20, 6), (19, 6), (20, 6), (20, 7), (20, 8), (19, 8), (18, 8), (17, 8), (18, 8), (19, 8), (20, 8
), (19, 8), (18, 8), (17, 8), (16, 8), (15, 8), (16, 8), (15, 8), (16, 8), (17, 8), (16, 8), (15, 8), (16, 8), (17, 8), (16, 8), (15, 8), (16, 8), (15, 8), (16, 8), (15, 8), (16, 8), (
15, 8), (16, 8), (15, 8), (16, 8), (15, 8), (16, 8), (17, 8), (16, 8), (15, 8), (16, 8), (15, 8), (16, 8), (15, 8), (16, 8), (17, 8), (16, 8), (15, 8), (16, 8), (15, 8), (16, 8), (17,
8), (16, 8), (15, 8), (16, 8), (17, 8), (18, 8), (19, 8), (20, 8), (20, 7), (20, 6), (20, 7), (20, 8), (20, 7), (20, 6), (19, 6), (20, 6), (19, 6), (20, 6), (19, 6), (18, 6), (19, 6),
(18, 6), (17, 6), (16, 6), (16, 5), (16, 6), (15, 6), (16, 6), (16, 5), (16, 6), (16, 5), (16, 4), (16, 5), (16, 4), (15, 4), (14, 4), (15, 4), (14, 4), (15, 4), (14, 4), (15, 4), (16,
 4), (16, 5), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (17, 6), (16, 6), (16, 5), (16, 6), (15, 6), (16, 6), (17, 6), (18, 6), (17, 6), (18, 6), (19, 6), (20, 6), (20, 7), (20, 8),
 (20, 7), (20, 6), (19, 6), (20, 6), (20, 7), (20, 6), (20, 7), (20, 6), (19, 6), (20, 6), (19, 6), (18, 6), (17, 6), (16, 6), (16, 5), (16, 4), (16, 5), (16, 6), (15, 6), (16, 6), (16
, 5), (16, 6), (15, 6), (16, 6), (16, 5), (16, 6), (17, 6), (16, 6), (17, 6), (16, 6), (17, 6), (16, 6), (16, 5), (16, 4), (16, 5), (16, 4), (16, 5), (16, 6), (15, 6), (16, 6), (16, 5)
, (16, 4), (16, 5), (16, 4), (15, 4), (16, 4), (16, 3), (17, 3), (16, 3), (17, 3), (16, 3), (16, 4), (16, 5), (16, 4), (16, 3), (17, 3), (16, 3), (17, 3), (18, 3), (17, 3), (18, 3), (18, 4), (19, 4), (20, 4), (19, 4), (20, 4), (20, 3), (20, 4), (20, 3), (20, 4), (20, 3), (20, 2), (20, 1), (20, 2), (20, 3), (20, 4), (19, 4), (20, 4), (19, 4), (20, 4), (19, 4), (18, 4
), (18, 3), (18, 4), (18, 3), (17, 3), (16, 3), (17, 3), (16, 3), (16, 4), (16, 3), (16, 4), (16, 5), (16, 6), (16, 5), (16, 6), (17, 6), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (
17, 6), (16, 6), (16, 5), (16, 4), (16, 3), (17, 3), (18, 3), (17, 3), (16, 3), (17, 3), (18, 3), (17, 3), (18, 3), (18, 4), (19, 4), (18, 4), (18, 3), (18, 4), (18, 3), (17, 3), (16,
3), (17, 3), (16, 3), (16, 4), (16, 5), (16, 4), (15, 4), (14, 4), (13, 4), (14, 4), (15, 4), (16, 4), (16, 5), (16, 6), (15, 6), (16, 6), (16, 5), (16, 6), (17, 6), (18, 6), (17, 6),
(16, 6), (17, 6), (18, 6), (19, 6), (18, 6), (17, 6), (18, 6), (17, 6), (16, 6), (17, 6), (16, 6), (16, 5), (16, 4), (16, 5), (16, 6), (15, 6), (16, 6), (16, 5), (16, 6), (16, 5), (16,
 4), (16, 5), (16, 4), (16, 5), (16, 6), (17, 6), (16, 6), (17, 6), (18, 6), (17, 6), (18, 6), (17, 6), (18, 6), (17, 6), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (17, 6), (18, 6),
 (19, 6), (20, 6), (19, 6), (18, 6), (19, 6), (18, 6), (17, 6), (16, 6), (15, 6), (16, 6), (16, 5), (16, 4), (15, 4), (14, 4), (15, 4), (14, 4), (13, 4), (14, 4), (15, 4), (14, 4), (13
, 4), (13, 5), (13, 6), (12, 6), (13, 6), (12, 6), (11, 6), (12, 6), (11, 6), (10, 6), (11, 6), (10, 6), (9, 6), (10, 6), (9, 6), (8, 6), (7, 6), (8, 6), (7, 6), (6, 6), (7, 6), (6, 6)
, (7, 6), (6, 6), (7, 6), (6, 6), (6, 5), (6, 4), (6, 3), (7, 3), (8, 3), (8, 4), (9, 4), (8, 4), (9, 4), (10, 4), (11, 4), (10, 4), (11, 4), (12, 4), (13, 4), (14, 4), (13, 4), (13, 5
), (13, 6), (13, 5), (13, 6), (12, 6), (11, 6), (12, 6), (13, 6), (13, 7), (13, 6), (13, 5), (13, 6), (13, 5), (13, 6), (12, 6), (13, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (
13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (13, 7), (13, 6), (12, 6), (11, 6), (10, 6), (11, 6), (12, 6), (11, 6), (11, 7), (11, 6), (10, 6), (11, 6), (12, 6), (11, 6), (11, 7), (11,
8), (10, 8), (9, 8), (10, 8), (9, 8), (10, 8), (9, 8), (8, 8), (9, 8), (10, 8), (11, 8), (10, 8), (9, 8), (10, 8), (11, 8), (10, 8), (11, 8), (10, 8), (9, 8), (10, 8), (11, 8), (11, 7)
, (11, 8), (10, 8), (9, 8), (8, 8), (9, 8), (8, 8), (9, 8), (8, 8), (9, 8), (8, 8), (9, 8), (10, 8), (11, 8), (11, 7), (11, 8), (11, 7), (11, 8), (10, 8), (11, 8), (10, 8), (11, 8), (10, 8), (9, 8), (10, 8), (11, 8), (11, 7), (11, 6), (11, 7), (11, 6), (11, 7), (11, 8), (10, 8), (9, 8), (10, 8), (11, 8), (10, 8), (11, 8), (10, 8), (9, 8), (8, 8), (9, 8), (8, 8), (9,
 8), (10, 8), (9, 8), (8, 8), (7, 8), (8, 8), (7, 8), (6, 8), (5, 8), (6, 8), (5, 8), (6, 8), (5, 8), (4, 8), (5, 8), (6, 8), (7, 8), (6, 8), (7, 8), (6, 8), (5, 8), (4, 8), (5, 8), (6
, 8), (5, 8), (4, 8), (5, 8), (4, 8), (5, 8), (6, 8), (5, 8), (4, 8), (4, 7), (4, 8), (5, 8), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (10, 8), (9, 8), (8, 8),
 (7, 8), (8, 8), (9, 8), (10, 8), (9, 8), (10, 8), (11, 8), (11, 7), (11, 6), (10, 6), (9, 6), (8, 6), (7, 6), (6, 6), (7, 6), (6, 6), (7, 6), (6, 6), (7, 6), (6, 6), (7, 6), (8, 6), (
9, 6), (10, 6), (9, 6), (10, 6), (11, 6), (10, 6), (9, 6), (10, 6), (9, 6), (8, 6), (7, 6), (6, 6), (6, 5), (6, 6), (6, 5), (6, 4), (6, 3), (6, 4), (6, 5), (6, 6), (7, 6), (6, 6), (6,
5), (6, 4), (6, 5), (6, 4), (6, 3), (6, 4), (6, 5), (6, 4), (6, 3), (5, 3), (4, 3), (5, 3), (4, 3), (5, 3), (6, 3), (5, 3), (6, 3), (6, 4), (6, 5), (6, 6), (7, 6), (6, 6), (6, 5), (6,
4), (6, 5), (6, 4), (6, 5), (6, 6), (6, 5), (6, 6), (7, 6), (8, 6), (7, 6), (8, 6), (7, 6), (8, 6), (7, 6), (8, 6), (7, 6), (6, 6), (7, 6), (6, 6), (7, 6), (8, 6), (9, 6), (10, 6), (9,
 6), (10, 6), (9, 6), (10, 6), (9, 6), (10, 6), (11, 6), (11, 7), (11, 6), (10, 6), (11, 6), (11, 7), (11, 8), (10, 8), (9, 8), (10, 8), (11, 8), (11, 7), (11, 6), (10, 6), (9, 6), (8,
 6), (9, 6), (8, 6), (9, 6), (10, 6), (9, 6), (10, 6), (9, 6), (8, 6), (9, 6), (10, 6), (9, 6), (10, 6), (9, 6), (10, 6), (11, 6), (11, 7), (11, 8), (11, 7), (11, 8), (11, 7), (11, 8),
 (10, 8), (9, 8), (10, 8), (9, 8), (8, 8), (9, 8), (10, 8), (9, 8), (10, 8), (9, 8), (10, 8), (11, 8), (10, 8), (9, 8), (8, 8), (7, 8), (6, 8), (5, 8), (4, 8), (4, 7), (4, 8), (5, 8),
(4, 8), (4, 7), (4, 8), (5, 8), (6, 8), (5, 8), (4, 8), (5, 8), (4, 8), (4, 7), (4, 8), (5, 8), (4, 8), (5, 8), (4, 8), (4, 7), (4, 8), (4, 7), (4, 8), (4, 7), (4, 8), (5, 8), (6, 8),
(5, 8), (4, 8), (4, 7), (3, 7), (2, 7), (1, 7), (1, 8), (1, 7), (2, 7), (3, 7), (4, 7), (3, 7), (2, 7), (1, 7), (2, 7), (1, 7), (2, 7), (1, 7), (2, 7), (1, 7), (1, 8), (1, 7), (1, 8),
(1, 7), (2, 7), (3, 7), (2, 7), (3, 7), (2, 7), (3, 7), (4, 7), (3, 7), (4, 7), (4, 8), (5, 8), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (10, 8), (11, 8), (11,
 7), (11, 8), (10, 8), (9, 8), (10, 8), (9, 8), (8, 8), (9, 8), (10, 8), (9, 8), (8, 8), (7, 8), (8, 8), (9, 8), (8, 8), (7, 8), (8, 8), (9, 8), (10, 8), (9, 8), (10, 8), (11, 8), (10,
 8), (9, 8), (10, 8), (9, 8), (10, 8), (11, 8), (10, 8), (11, 8), (11, 7), (11, 8), (10, 8), (11, 8), (11, 7), (11, 6), (10, 6), (9, 6), (10, 6), (11, 6), (11, 7), (11, 8), (10, 8), (9
, 8), (10, 8), (11, 8), (10, 8), (11, 8), (11, 7), (11, 8), (10, 8), (9, 8), (10, 8), (9, 8), (10, 8), (9, 8), (10, 8), (9, 8), (8, 8), (7, 8), (8, 8), (9, 8), (8, 8), (9, 8), (8, 8),
(7, 8), (6, 8), (5, 8), (4, 8), (4, 7), (3, 7), (4, 7), (3, 7), (4, 7), (4, 8), (4, 7), (4, 8), (5, 8), (4, 8), (5, 8), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (8, 8), (7, 8),
(8, 8), (7, 8), (6, 8), (5, 8), (6, 8), (7, 8), (8, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (10, 8), (9, 8), (10, 8), (11, 8), (10, 8), (9, 8), (8, 8), (7, 8), (8, 8), (7, 8), (6
, 8), (7, 8), (6, 8), (5, 8), (6, 8), (7, 8), (6, 8), (7, 8), (6, 8), (5, 8), (6, 8), (7, 8), (6, 8), (7, 8), (6, 8), (5, 8), (4, 8), (4, 7), (3, 7), (2, 7), (3, 7), (2, 7), (3, 7), (4
, 7), (4, 8), (5, 8), (4, 8), (4, 7), (4, 8), (4, 7), (4, 8), (5, 8), (6, 8), (5, 8), (4, 8), (4, 7), (3, 7), (4, 7), (3, 7), (2, 7), (1, 7), (1, 8), (1, 7), (1, 8), (1, 7), (1, 8), (1
, 7), (2, 7), (3, 7), (4, 7), (3, 7), (2, 7), (1, 7), (1, 8), (1, 7), (1, 8), (1, 7), (1, 8), (1, 7), (2, 7), (1, 7), (2, 7), (3, 7), (2, 7), (3, 7), (4, 7), (3, 7), (4, 7), (4, 8), (4
, 7), (4, 8), (4, 7), (3, 7), (4, 7), (3, 7), (2, 7), (1, 7), (1, 8), (1, 7), (2, 7), (1, 7), (2, 7), (3, 7), (2, 7), (1, 7), (2, 7), (3, 7), (2, 7), (1, 7), (1, 8), (1, 7), (2, 7), (1
, 7), (1, 8), (1, 7), (1, 8), (1, 7), (1, 8), (1, 7), (2, 7), (1, 7), (1, 8), (1, 7), (2, 7), (1, 7), (1, 8), (1, 7), (1, 8), (1, 7), (2, 7), (3, 7), (4, 7), (4, 8), (5, 8), (4, 8), (5
, 8), (4, 8), (5, 8), (6, 8), (5, 8), (4, 8), (4, 7), (3, 7), (2, 7), (1, 7), (1, 8), (1, 7), (2, 7), (3, 7), (4, 7), (3, 7), (4, 7), (3, 7), (4, 7), (3, 7), (4, 7), (3, 7), (4, 7), (4
, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (10, 8), (9, 8), (10, 8), (11, 8), (10, 8), (9, 8), (8, 8), (7, 8), (8, 8), (7, 8), (6, 8), (5, 8), (6, 8), (7, 8), (6,
8), (7, 8), (8, 8), (9, 8), (8, 8), (7, 8), (6, 8), (7, 8), (6, 8), (7, 8), (6, 8), (5, 8), (4, 8), (4, 7), (3, 7), (4, 7), (3, 7), (2, 7), (1, 7), (2, 7), (3, 7), (2, 7), (1, 7), (2,
7), (1, 7), (1, 8), (1, 7), (2, 7), (3, 7), (2, 7), (1, 7), (1, 8), (1, 7), (2, 7), (1, 7), (1, 8), (1, 7), (1, 8), (1, 7), (2, 7), (1, 7), (2, 7), (3, 7), (2, 7), (1, 7), (2, 7), (3,
7), (4, 7), (4, 8), (5, 8), (4, 8), (4, 7), (3, 7), (4, 7), (4, 8), (4, 7), (4, 8), (4, 7), (4, 8), (4, 7), (3, 7), (4, 7), (3, 7), (4, 7), (3, 7), (2, 7), (3, 7), (2, 7), (3, 7), (4,
7), (4, 8), (5, 8), (4, 8), (5, 8), (6, 8), (5, 8), (6, 8), (5, 8), (4, 8), (5, 8), (6, 8), (7, 8), (6, 8), (5, 8), (6, 8), (5, 8), (6, 8), (7, 8), (6, 8), (7, 8), (6, 8), (7, 8), (6,
8), (5, 8), (4, 8), (4, 7), (4, 8), (4, 7), (3, 7), (2, 7), (1, 7), (2, 7), (1, 7), (2, 7), (3, 7), (2, 7), (3, 7), (2, 7), (1, 7), (1, 8), (1, 7), (1, 8), (1, 7), (2, 7), (3, 7), (2,
7), (3, 7), (2, 7), (3, 7), (2, 7), (3, 7), (2, 7), (3, 7), (2, 7), (1, 7), (1, 8), (1, 7), (1, 8), (1, 7), (2, 7), (3, 7), (2, 7), (1, 7), (2, 7), (3, 7), (4, 7), (4, 8), (4, 7), (4,
8), (4, 7), (3, 7), (4, 7), (4, 8), (4, 7), (3, 7), (2, 7), (1, 7), (1, 8), (1, 7), (2, 7), (3, 7), (4, 7), (4, 8), (4, 7), (4, 8), (5, 8), (6, 8), (7, 8), (6, 8), (7, 8), (6, 8), (7,
8), (6, 8), (5, 8), (4, 8), (5, 8), (6, 8), (7, 8), (6, 8), (7, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8), (9, 8), (10, 8), (11, 8), (10, 8), (11, 8), (11, 7), (11, 6), (11, 7), (11,
 6), (10, 6), (11, 6), (11, 7), (11, 6), (11, 7), (11, 6), (12, 6), (11, 6), (12, 6), (11, 6), (10, 6), (9, 6), (10, 6), (11, 6), (12, 6), (13, 6), (13, 5), (13, 4), (13, 5), (13, 6),
(12, 6), (11, 6), (10, 6), (9, 6), (8, 6), (9, 6), (8, 6), (9, 6), (10, 6), (9, 6), (10, 6), (11, 6), (11, 7), (11, 6), (12, 6), (13, 6), (12, 6), (13, 6), (13, 7), (13, 6), (13, 7), (
13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (12, 6), (11, 6), (11, 7), (11, 6), (12, 6), (11, 6), (11, 7), (11, 8), (11, 7), (11, 6), (10, 6), (9, 6), (10, 6), (11, 6), (11, 7), (11, 6
), (11, 7), (11, 8), (10, 8), (11, 8), (11, 7), (11, 6), (10, 6), (11, 6), (12, 6), (13, 6), (13, 7), (13, 6), (13, 5), (13, 6), (12, 6), (13, 6), (13, 5), (13, 4), (13, 5), (13, 6), (
12, 6), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 8), (13, 7), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (13,
7), (13, 6), (13, 5), (13, 6), (13, 5), (13, 6), (12, 6), (13, 6), (12, 6), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (13, 5), (13, 4), (12, 4), (11, 4), (10, 4), (9, 4), (10, 4), (
9, 4), (10, 4), (11, 4), (12, 4), (11, 4), (12, 4), (11, 4), (12, 4), (12, 3), (12, 2), (12, 3), (12, 2), (12, 3), (12, 4), (12, 3), (12, 2), (12, 3), (12, 2), (12, 3), (12, 4), (12, 3
), (12, 2), (11, 2), (12, 2), (12, 3), (12, 2), (13, 2), (13, 1), (13, 2), (12, 2), (11, 2), (12, 2), (13, 2), (12, 2), (13, 2), (12, 2), (13, 2), (13, 1), (13, 2), (12, 2), (12, 3), (
12, 4), (12, 3), (12, 2), (13, 2), (12, 2), (13, 2), (13, 1), (13, 2), (12, 2), (11, 2), (12, 2), (12, 3), (12, 4), (13, 4), (14, 4), (13, 4), (12, 4), (12, 3), (12, 4), (11, 4), (10,
4), (9, 4), (8, 4), (8, 3), (8, 4), (9, 4), (10, 4), (11, 4), (12, 4), (12, 3), (12, 4), (12, 3), (12, 2), (11, 2), (10, 2), (11, 2), (10, 2), (11, 2), (12, 2), (12, 3), (12, 4), (13,
4), (13, 5), (13, 4), (13, 5), (13, 4), (13, 5), (13, 4), (14, 4), (15, 4), (16, 4), (16, 3), (17, 3), (18, 3), (17, 3), (16, 3), (16, 4), (16, 3), (17, 3), (18, 3), (17, 3), (16, 3),
(16, 4), (16, 5), (16, 6), (17, 6), (16, 6), (16, 5), (16, 6), (17, 6), (16, 6), (15, 6), (16, 6), (16, 5), (16, 4), (16, 5), (16, 4), (16, 5), (16, 4), (16, 5), (16, 4), (15, 4), (16,
 4), (16, 5), (16, 6), (17, 6), (18, 6), (17, 6), (18, 6), (17, 6), (18, 6), (17, 6), (18, 6), (17, 6), (16, 6), (17, 6), (16, 6), (17, 6), (18, 6), (19, 6), (20, 6), (19, 6), (20, 6),
 (19, 6), (18, 6), (19, 6), (18, 6), (17, 6), (18, 6), (17, 6), (18, 6), (17, 6), (18, 6), (19, 6), (20, 6), (19, 6), (18, 6), (17, 6), (16, 6), (17, 6), (18, 6), (17, 6), (16, 6), (16
, 5), (16, 6), (16, 5), (16, 6), (17, 6), (18, 6), (17, 6), (16, 6), (17, 6), (16, 6), (15, 6), (16, 6), (16, 5), (16, 6), (17, 6), (16, 6), (17, 6), (16, 6), (15, 6), (16, 6), (16, 5)
, (16, 6), (17, 6), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (15, 6), (16, 6), (17, 6), (16, 6), (15, 6), (16, 6), (16, 5), (16, 4), (16, 3), (16, 4), (16, 3), (17, 3), (18, 3), (18, 4), (19, 4), (20, 4), (19, 4), (18, 4), (18, 3), (17, 3), (16, 3), (16, 4), (15, 4), (16, 4), (15, 4), (16, 4), (16, 3), (17, 3), (16, 3), (16, 4), (15, 4), (14, 4
), (13, 4), (12, 4), (13, 4), (12, 4), (12, 3), (12, 4), (11, 4), (12, 4), (11, 4), (12, 4), (12, 3), (12, 4), (12, 3), (12, 4), (12, 3), (12, 2), (11, 2), (10, 2), (11, 2), (12, 2), (
13, 2), (13, 1), (13, 2), (13, 1), (13, 2), (13, 1), (13, 2), (12, 2), (13, 2), (12, 2), (12, 3), (12, 2), (13, 2), (13, 1), (14, 1), (13, 1), (14, 1), (13, 1), (14, 1), (15, 1), (16,
1), (17, 1), (18, 1), (17, 1), (18, 1), (17, 1), (18, 1), (19, 1), (18, 1), (17, 1), (18, 1), (19, 1), (20, 1), (19, 1), (18, 1), (19, 1), (18, 1), (17, 1), (18, 1), (19, 1), (18, 1),
(17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (14, 1), (15, 1), (16, 1), (15, 1), (16, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (18, 1), (19, 1), (20, 1), (20, 2), (20, 3), (20,
 4), (19, 4), (20, 4), (19, 4), (18, 4), (19, 4), (18, 4), (18, 3), (18, 4), (19, 4), (20, 4), (20, 3), (20, 4), (20, 3), (20, 2), (20, 1), (20, 2), (20, 3), (20, 4), (19, 4), (20, 4),
 (20, 3), (20, 4), (20, 3), (20, 2), (20, 1), (19, 1), (20, 1), (19, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (13, 2), (13, 1), (13, 2), (12, 2), (12
, 3), (12, 4), (13, 4), (14, 4), (15, 4), (14, 4), (15, 4), (16, 4), (16, 3), (16, 4), (16, 3), (17, 3), (16, 3), (16, 4), (15, 4), (14, 4), (13, 4), (14, 4), (13, 4), (13, 5), (13, 6)
, (13, 5), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (13, 7), (13, 6), (12, 6), (11, 6), (12, 6), (11, 6), (10, 6), (9, 6), (10, 6), (11, 6), (12, 6), (13, 6), (12, 6), (13, 6), (13
, 5), (13, 6), (13, 7), (13, 6), (13, 7), (13, 6), (12, 6), (11, 6), (12, 6), (13, 6), (13, 7), (13, 6), (13, 7), (13, 8), (13, 7), (13, 6), (13, 7), (13, 6), (12, 6), (11, 6), (10, 6)
, (11, 6), (10, 6), (11, 6), (11, 7), (11, 8), (10, 8), (11, 8), (11, 7), (11, 8), (11, 7), (11, 8), (11, 7), (11, 8), (11, 7), (11, 8), (11, 7), (11, 6), (10, 6), (11, 6), (10, 6), (11, 6), (12, 6), (11, 6), (12, 6), (11, 6), (10, 6), (11, 6), (12, 6), (11, 6), (11, 7), (11, 8), (10, 8), (9, 8), (8, 8), (7, 8), (8, 8), (7, 8), (6, 8), (7, 8), (6, 8), (5, 8), (6, 8)
, (7, 8), (6, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (8, 8), (7, 8), (8, 8), (9, 8), (8, 8), (7, 8), (6, 8), (7, 8), (8, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (11, 7), (11
, 8), (10, 8), (9, 8), (8, 8), (7, 8), (8, 8), (7, 8), (6, 8), (5, 8), (6, 8), (7, 8), (6, 8), (5, 8), (6, 8), (5, 8), (6, 8), (5, 8), (4, 8), (4, 7), (3, 7), (2, 7), (3, 7), (2, 7), (
1, 7), (1, 8), (1, 7), (2, 7), (3, 7), (4, 7), (3, 7), (4, 7), (4, 8), (5, 8), (6, 8), (7, 8), (6, 8), (7, 8), (6, 8), (7, 8), (8, 8), (7, 8), (6, 8), (7, 8), (8, 8), (9, 8), (8, 8), (
9, 8), (10, 8), (9, 8), (10, 8), (9, 8), (8, 8), (7, 8), (8, 8), (7, 8), (8, 8), (7, 8), (6, 8), (7, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (10, 8), (11, 8), (10, 8), (9
, 8), (8, 8), (7, 8), (6, 8), (5, 8), (4, 8), (4, 7), (4, 8), (5, 8), (6, 8), (7, 8), (6, 8), (5, 8), (6, 8), (5, 8), (4, 8), (5, 8), (4, 8), (5, 8), (4, 8), (4, 7), (4, 8), (4, 7), (4
, 8), (5, 8), (6, 8), (7, 8), (6, 8), (7, 8), (6, 8), (5, 8), (4, 8), (5, 8), (6, 8), (5, 8), (6, 8), (5, 8), (4, 8), (4, 7), (4, 8), (4, 7), (3, 7), (4, 7), (4, 8), (5, 8), (6, 8), (5
, 8), (4, 8), (4, 7), (3, 7), (2, 7), (3, 7), (2, 7), (3, 7), (4, 7), (3, 7), (4, 7), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (8, 8), (7, 8), (6, 8), (7, 8), (6, 8), (7, 8), (8
, 8), (9, 8), (10, 8), (11, 8), (11, 7), (11, 6), (12, 6), (11, 6), (12, 6), (11, 6), (11, 7), (11, 6), (12, 6), (11, 6), (12, 6), (11, 6), (11, 7), (11, 8), (10, 8), (9, 8), (8, 8), (
9, 8), (10, 8), (9, 8), (8, 8), (7, 8), (6, 8), (7, 8), (8, 8), (7, 8), (6, 8), (7, 8), (6, 8), (7, 8), (6, 8), (7, 8), (6, 8), (5, 8), (4, 8), (5, 8), (4, 8), (5, 8), (6, 8), (7, 8),
(8, 8), (7, 8), (8, 8), (7, 8), (8, 8), (7, 8), (6, 8), (5, 8), (6, 8), (5, 8), (6, 8), (7, 8), (8, 8), (7, 8), (6, 8), (7, 8), (8, 8), (7, 8), (8, 8), (7, 8), (8, 8), (9, 8), (8, 8),
(7, 8), (6, 8), (7, 8), (8, 8), (7, 8), (6, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (8, 8), (7, 8), (8, 8), (9, 8), (10, 8), (9, 8), (10, 8), (11, 8), (10, 8), (9, 8), (8, 8), (7,
8), (8, 8), (7, 8), (6, 8), (7, 8), (6, 8), (5, 8), (6, 8), (7, 8), (6, 8), (7, 8), (8, 8), (7, 8), (6, 8), (7, 8), (6, 8), (5, 8), (4, 8), (5, 8), (4, 8), (4, 7), (3, 7), (4, 7), (4,
8), (4, 7), (4, 8), (4, 7), (4, 8), (4, 7), (3, 7), (4, 7), (3, 7), (4, 7), (4, 8), (5, 8), (4, 8), (4, 7), (4, 8), (5, 8), (4, 8), (5, 8), (6, 8), (5, 8), (6, 8), (7, 8), (6, 8), (5,
8), (4, 8), (5, 8), (4, 8), (4, 7), (4, 8), (4, 7), (3, 7), (4, 7), (4, 8), (4, 7), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (7, 8), (6, 8), (5, 8), (4, 8), (5, 8), (6, 8), (5, 8), (4,
8), (4, 7), (3, 7), (4, 7), (3, 7), (2, 7), (1, 7), (2, 7), (1, 7), (2, 7), (1, 7), (1, 8), (1, 7), (2, 7), (3, 7), (2, 7), (3, 7), (2, 7), (1, 7), (2, 7), (1, 7), (2, 7), (3, 7), (4,
7), (3, 7), (4, 7), (4, 8), (5, 8), (4, 8), (4, 7), (4, 8), (5, 8), (6, 8), (5, 8), (6, 8), (7, 8), (8, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (11, 7), (11, 8), (11, 7), (11, 6)
, (11, 7), (11, 8), (10, 8), (9, 8), (10, 8), (11, 8), (11, 7), (11, 8), (11, 7), (11, 6), (10, 6), (9, 6), (10, 6), (11, 6), (11, 7), (11, 8), (11, 7), (11, 8), (11, 7), (11, 8), (11,
 7), (11, 6), (10, 6), (11, 6), (12, 6), (13, 6), (12, 6), (13, 6), (12, 6), (11, 6), (11, 7), (11, 8), (11, 7), (11, 6), (12, 6), (11, 6), (10, 6), (11, 6), (12, 6), (13, 6), (12, 6),
 (11, 6), (11, 7), (11, 8), (11, 7), (11, 6), (11, 7), (11, 8), (11, 7), (11, 6), (12, 6), (11, 6), (11, 7), (11, 6), (11, 7), (11, 6), (11, 7), (11, 6), (11, 7), (11, 6), (10, 6), (9,
 6), (8, 6), (9, 6), (8, 6), (9, 6), (8, 6), (7, 6), (6, 6), (7, 6), (8, 6), (7, 6), (6, 6), (7, 6), (8, 6), (7, 6), (8, 6), (7, 6), (6, 6), (7, 6), (6, 6), (6, 5), (6, 4), (6, 3), (7,
 3), (6, 3), (7, 3), (8, 3), (8, 4), (8, 3), (7, 3), (8, 3), (7, 3), (8, 3), (7, 3), (6, 3), (6, 4), (6, 5), (6, 4), (6, 3), (6, 4), (6, 3), (5, 3), (6, 3), (7, 3), (6, 3), (7, 3), (8,
 3), (8, 4), (9, 4), (8, 4), (8, 3), (7, 3), (6, 3), (7, 3), (6, 3), (5, 3), (4, 3), (3, 3), (4, 3), (3, 3), (2, 3), (3, 3), (4, 3), (5, 3), (6, 3), (5, 3), (4, 3), (3, 3), (4, 3), (3,
 3), (4, 3), (5, 3), (6, 3), (7, 3), (6, 3), (6, 4), (6, 5), (6, 4), (6, 5), (6, 4), (6, 5), (6, 6), (7, 6), (6, 6), (6, 5), (6, 6), (6, 5), (6, 4), (6, 3), (7, 3), (6, 3), (6, 4), (6,
 3), (7, 3), (6, 3), (7, 3), (6, 3), (5, 3), (4, 3), (5, 3), (4, 3), (3, 3), (4, 3), (3, 3), (4, 3), (5, 3), (4, 3), (5, 3), (4, 3), (5, 3), (4, 3), (3, 3), (4, 3), (5, 3), (6, 3), (7,
 3), (8, 3), (7, 3), (6, 3), (5, 3), (4, 3), (5, 3), (6, 3), (7, 3), (8, 3), (8, 4), (8, 3), (8, 4), (8, 3), (7, 3), (6, 3), (6, 4), (6, 5), (6, 6), (7, 6), (6, 6), (7, 6), (6, 6), (6,
 5), (6, 6), (7, 6), (6, 6), (6, 5), (6, 6), (6, 5), (6, 6), (7, 6), (6, 6), (7, 6), (6, 6), (7, 6), (8, 6), (9, 6), (8, 6), (9, 6), (8, 6), (9, 6), (8, 6), (7, 6), (6, 6), (7, 6), (6,
 6), (6, 5), (6, 6), (7, 6), (6, 6), (6, 5), (6, 4), (6, 5), (6, 4), (6, 5), (6, 6), (7, 6), (6, 6), (7, 6), (8, 6), (9, 6), (10, 6), (9, 6), (10, 6), (11, 6), (11, 7), (11, 8), (10, 8
), (11, 8), (10, 8), (11, 8), (10, 8), (9, 8), (8, 8), (9, 8), (10, 8), (11, 8), (11, 7), (11, 8), (11, 7), (11, 6), (11, 7), (11, 8), (10, 8), (11, 8), (11, 7), (11, 6), (12, 6), (13,
 6), (12, 6), (13, 6), (12, 6), (11, 6), (11, 7), (11, 8), (11, 7), (11, 8), (11, 7), (11, 6), (12, 6), (11, 6), (12, 6), (11, 6), (11, 7), (11, 6), (10, 6), (9, 6), (8, 6), (7, 6), (6
, 6), (6, 5), (6, 6), (6, 5), (6, 4), (6, 3), (5, 3), (6, 3), (7, 3), (8, 3), (7, 3), (6, 3), (5, 3), (6, 3), (6, 4), (6, 5), (6, 4), (6, 3), (7, 3), (8, 3), (7, 3), (6, 3), (7, 3), (8
, 3), (8, 4), (8, 3), (8, 4), (8, 3), (8, 4), (9, 4), (10, 4), (11, 4), (12, 4), (11, 4), (10, 4), (11, 4), (12, 4), (13, 4), (14, 4), (13, 4), (12, 4), (11, 4), (12, 4), (11, 4), (10,
 4), (11, 4), (10, 4), (11, 4), (10, 4), (9, 4), (8, 4), (8, 3), (8, 4), (8, 3), (8, 4), (9, 4), (8, 4), (9, 4), (8, 4), (9, 4), (8, 4), (8, 3), (8, 4), (8, 3), (7, 3), (8, 3), (7, 3),
 (8, 3), (7, 3), (8, 3), (8, 4), (8, 3), (8, 4), (9, 4), (10, 4), (11, 4), (10, 4), (9, 4), (10, 4), (11, 4), (10, 4), (11, 4), (10, 4), (11, 4), (12, 4), (11, 4), (12, 4), (11, 4), (10, 4), (11, 4), (10, 4), (11, 4), (12, 4), (12, 3), (12, 4), (11, 4), (10, 4), (11, 4), (10, 4), (9, 4), (8, 4), (9, 4), (8, 4), (9, 4), (10, 4), (9, 4), (10, 4), (9, 4), (8, 4), (8, 3
), (7, 3), (6, 3), (5, 3), (6, 3), (5, 3), (4, 3), (3, 3), (4, 3), (5, 3), (6, 3), (6, 4), (6, 3), (5, 3), (4, 3), (5, 3), (4, 3), (5, 3), (6, 3), (7, 3), (8, 3), (7, 3), (8, 3), (7, 3
), (8, 3), (8, 4), (9, 4), (10, 4), (9, 4), (8, 4), (9, 4), (8, 4), (8, 3), (7, 3), (8, 3), (7, 3), (6, 3), (7, 3), (8, 3), (7, 3), (8, 3), (7, 3), (6, 3), (6, 4), (6, 3), (7, 3), (8,
3), (8, 4), (9, 4), (8, 4), (9, 4), (8, 4), (9, 4), (8, 4), (8, 3), (7, 3), (6, 3), (6, 4), (6, 3), (6, 4), (6, 3), (5, 3), (4, 3), (3, 3), (4, 3), (5, 3), (4, 3), (3, 3), (4, 3), (3,
3), (2, 3), (3, 3), (4, 3), (3, 3), (4, 3), (5, 3), (6, 3), (6, 4), (6, 5), (6, 6), (7, 6), (6, 6), (6, 5), (6, 4), (6, 3), (5, 3), (4, 3), (5, 3), (6, 3), (6, 4), (6, 3), (7, 3), (8,
3), (7, 3), (6, 3), (7, 3), (6, 3), (6, 4), (6, 3), (6, 4), (6, 5), (6, 6), (7, 6), (6, 6), (7, 6), (8, 6), (9, 6), (8, 6), (7, 6), (6, 6), (7, 6), (6, 6), (6, 5), (6, 4), (6, 5), (6,
4), (6, 5), (6, 6), (7, 6), (6, 6), (7, 6), (6, 6), (6, 5), (6, 6), (6, 5), (6, 4), (6, 3), (7, 3), (6, 3), (5, 3), (4, 3), (3, 3), (2, 3), (1, 3), (1, 4), (1, 3), (2, 3), (1, 3), (2,
3), (3, 3), (2, 3), (3, 3), (4, 3), (3, 3), (2, 3), (3, 3), (4, 3), (3, 3), (2, 3), (1, 3), (1, 4), (1, 3), (2, 3), (3, 3), (2, 3), (3, 3), (4, 3), (5, 3), (4, 3), (3, 3), (2, 3), (1,
3), (2, 3), (1, 3), (1, 4), (1, 3), (2, 3), (1, 3), (1, 4), (1, 3), (2, 3), (1, 3), (1, 4), (1, 3), (1, 4), (1, 3), (2, 3), (3, 3), (2, 3), (3, 3), (4, 3), (5, 3), (4, 3), (5, 3), (4,
3), (5, 3), (6, 3), (6, 4), (6, 3), (7, 3), (8, 3), (7, 3), (6, 3), (6, 4), (6, 5), (6, 4), (6, 3), (7, 3), (6, 3), (7, 3), (8, 3), (8, 4), (8, 3), (8, 4), (9, 4), (10, 4), (9, 4), (10
, 4), (11, 4), (10, 4), (11, 4), (10, 4), (11, 4), (12, 4), (12, 3), (12, 4), (11, 4), (10, 4), (11, 4), (12, 4), (11, 4), (12, 4), (11, 4), (10, 4), (9, 4), (8, 4), (8, 3), (8, 4), (8
, 3), (7, 3), (6, 3), (7, 3), (8, 3), (7, 3), (8, 3), (7, 3), (8, 3), (7, 3), (6, 3), (7, 3), (8, 3), (7, 3), (8, 3), (8, 4), (9, 4), (10, 4), (9, 4), (8, 4), (8, 3), (7, 3), (6, 3), (
7, 3), (6, 3), (5, 3), (6, 3), (7, 3), (8, 3), (7, 3), (6, 3), (6, 4), (6, 5), (6, 4), (6, 5), (6, 6), (7, 6), (8, 6), (9, 6), (10, 6), (9, 6), (8, 6), (7, 6), (6, 6), (6, 5), (6, 6),
(6, 5), (6, 6), (6, 5), (6, 4), (6, 3), (6, 4), (6, 3), (7, 3), (8, 3), (8, 4), (8, 3), (8, 4), (8, 3), (7, 3), (8, 3), (7, 3), (8, 3), (8, 4), (8, 3), (8, 4), (9, 4), (8, 4), (8, 3),
(7, 3), (6, 3), (5, 3), (6, 3), (5, 3), (4, 3), (5, 3), (4, 3), (5, 3), (6, 3), (5, 3), (6, 3), (5, 3), (4, 3), (5, 3), (6, 3), (6, 4), (6, 5), (6, 4), (6, 5), (6, 4), (6, 3), (5, 3),
(4, 3), (3, 3), (4, 3), (5, 3), (4, 3), (5, 3), (4, 3), (3, 3), (4, 3), (3, 3), (4, 3), (5, 3), (4, 3), (5, 3), (6, 3), (6, 4), (6, 3), (6, 4), (6, 5), (6, 6), (6, 5), (6, 6), (6, 5),
(6, 6), (6, 5), (6, 4), (6, 3), (5, 3), (4, 3), (3, 3), (2, 3), (3, 3), (2, 3), (3, 3), (4, 3), (3, 3), (4, 3), (3, 3), (4, 3), (5, 3), (4, 3), (5, 3), (6, 3), (5, 3), (6, 3), (6, 4),
(6, 5), (6, 6), (6, 5), (6, 4), (6, 5), (6, 6), (7, 6), (8, 6), (9, 6), (10, 6), (11, 6), (11, 7), (11, 6), (12, 6), (13, 6), (13, 7), (13, 6), (12, 6), (11, 6), (10, 6), (9, 6), (10,
6), (9, 6), (8, 6), (9, 6), (10, 6), (9, 6), (8, 6), (9, 6), (8, 6), (9, 6), (8, 6), (9, 6), (10, 6), (11, 6), (12, 6), (13, 6), (12, 6), (11, 6), (10, 6), (9, 6), (10, 6), (11, 6), (12, 6), (11, 6), (11, 7), (11, 6), (10, 6), (11, 6), (11, 7), (11, 6), (10, 6), (9, 6), (8, 6), (7, 6), (8, 6), (9, 6), (8, 6), (9, 6), (10, 6), (9, 6), (8, 6), (9, 6), (10, 6), (9, 6),
 (10, 6), (11, 6), (11, 7), (11, 6), (10, 6), (9, 6), (10, 6), (11, 6), (11, 7), (11, 8), (11, 7), (11, 8), (10, 8), (11, 8), (11, 7), (11, 8), (11, 7), (11, 6), (10, 6), (9, 6), (10,
6), (9, 6), (8, 6), (7, 6), (8, 6), (7, 6), (6, 6), (6, 5), (6, 4), (6, 5), (6, 6), (6, 5), (6, 4), (6, 5), (6, 6), (7, 6), (6, 6), (6, 5), (6, 4), (6, 3), (5, 3), (4, 3), (3, 3), (4,
3), (3, 3), (4, 3), (5, 3), (4, 3), (3, 3), (2, 3), (1, 3), (1, 4), (1, 3), (2, 3), (1, 3), (2, 3), (3, 3), (4, 3), (5, 3), (6, 3), (7, 3), (6, 3), (6, 4), (6, 5), (6, 4), (6, 5), (6,
4), (6, 3), (5, 3), (4, 3), (3, 3), (2, 3), (3, 3), (4, 3), (3, 3), (4, 3), (5, 3), (4, 3), (3, 3), (2, 3), (1, 3), (1, 4), (1, 5), (2, 5), (1, 5), (1, 4), (1, 5), (2, 5), (3, 5), (2,
5), (3, 5), (4, 5), (3, 5), (2, 5), (1, 5), (1, 4), (1, 5), (2, 5), (1, 5), (2, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (2, 5), (3, 5), (2, 5), (1, 5), (2, 5), (3, 5), (4, 5), (3,
5), (2, 5), (3, 5), (4, 5), (3, 5), (2, 5), (3, 5), (2, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (2, 5), (1, 5), (2, 5), (3, 5), (4, 5), (3, 5), (4, 5), (3, 5), (2, 5), (3, 5), (2,
5), (3, 5), (4, 5), (3, 5), (2, 5), (1, 5), (2, 5), (3, 5), (4, 5), (3, 5), (2, 5), (1, 5), (2, 5), (3, 5), (2, 5), (3, 5), (2, 5), (1, 5), (1, 4), (1, 3), (2, 3), (1, 3), (1, 4), (1,
3), (1, 4), (1, 3), (1, 4), (1, 3), (2, 3), (1, 3), (1, 4), (1, 5), (1, 4), (1, 5), (2, 5), (1, 5), (2, 5), (3, 5), (2, 5), (1, 5), (1, 4), (1, 5), (1, 4), (1, 3), (1, 4), (1, 3), (2,
3), (3, 3), (4, 3), (3, 3), (4, 3), (5, 3), (6, 3), (5, 3), (6, 3), (6, 4), (6, 5), (6, 6), (6, 5), (6, 4), (6, 3), (5, 3), (6, 3), (5, 3), (6, 3), (5, 3), (4, 3), (5, 3), (4, 3), (3,
3), (4, 3), (3, 3), (2, 3), (1, 3), (2, 3), (3, 3), (4, 3), (3, 3), (4, 3), (5, 3), (6, 3), (7, 3), (6, 3), (7, 3), (8, 3), (7, 3), (8, 3), (7, 3), (8, 3), (8, 4), (9, 4), (10, 4), (9,
 4), (10, 4), (9, 4), (10, 4), (11, 4), (12, 4), (11, 4), (12, 4), (11, 4), (10, 4), (11, 4), (10, 4), (11, 4), (12, 4), (13, 4), (14, 4), (13, 4), (12, 4), (12, 3), (12, 4), (12, 3),
(12, 4), (13, 4), (14, 4), (13, 4), (12, 4), (11, 4), (12, 4), (12, 3), (12, 2), (11, 2), (12, 2), (11, 2), (12, 2), (11, 2), (10, 2), (10, 1), (10, 2), (10, 1), (9, 1), (8, 1), (7, 1)
, (8, 1), (7, 1), (8, 1), (9, 1), (8, 1), (9, 1), (10, 1), (10, 2), (11, 2), (10, 2), (11, 2), (10, 2), (10, 1), (10, 2), (10, 1), (9, 1), (8, 1), (7, 1), (8, 1), (7, 1), (6, 1), (5, 1), (4, 1), (5, 1), (4, 1), (3, 1), (2, 1), (1, 1)]

population6 = [(11, 6), (12, 6), (13, 6), (13, 5), (13, 6), (13, 5), (13, 4), (12, 4), (12, 3), (12, 4), (11, 4), (10, 4), (9, 4), (8, 4), (9, 4), (10, 4), (11, 4), (10, 4), (9, 4), (8, 4), (8, 3),
(8, 4), (9, 4), (10, 4), (11, 4), (10, 4), (11, 4), (10, 4), (9, 4), (8, 4), (9, 4), (10, 4), (9, 4), (10, 4), (9, 4), (10, 4), (11, 4), (10, 4), (11, 4), (12, 4), (13, 4), (12, 4), (12, 3), (12, 2), (13, 2), (12, 2), (13, 2), (13, 1), (13, 2), (12, 2), (11, 2), (10, 2), (11, 2), (10, 2), (11, 2), (12, 2), (11, 2), (10, 2), (11, 2), (12, 2), (11, 2), (12, 2), (12, 3
), (12, 2), (11, 2), (10, 2), (10, 1), (10, 2), (11, 2), (10, 2), (10, 1), (9, 1), (10, 1), (9, 1), (8, 1), (9, 1), (8, 1), (9, 1), (8, 1), (9, 1), (10, 1), (10, 2), (10, 1), (9, 1), (
10, 1), (9, 1), (10, 1), (10, 2), (10, 1), (10, 2), (10, 1), (10, 2), (10, 1), (10, 2), (10, 1), (9, 1), (8, 1), (7, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (10, 2), (10, 1), (9, 1), (8, 1), (7, 1), (6, 1), (5, 1), (4, 1), (5, 1), (4, 1), (3, 1), (2, 1), (3, 1), (4, 1), (3, 1), (4, 1), (5, 1), (4, 1), (3, 1), (2, 1), (1, 1)]



class SearchProblem:
    """
    This class outlines the structure of a search problem, but doesn't implement
    any of the methods (in object-oriented terminology: an abstract class).

    You do not need to change anything in this class, ever.
    """

    def getStartState(self):
        """
        Returns the start state for the search problem.
        """
        util.raiseNotDefined()

    def isGoalState(self, state):
        """
          state: Search state

        Returns True if and only if the state is a valid goal state.
        """
        util.raiseNotDefined()

    def getSuccessors(self, state):
        """
          state: Search state

        For a given state, this should return a list of triples, (successor,
        action, stepCost), where 'successor' is a successor to the current
        state, 'action' is the action required to get there, and 'stepCost' is
        the incremental cost of expanding to that successor.
        """
        util.raiseNotDefined()

    def getCostOfActions(self, actions):
        """
         actions: A list of actions to take

        This method returns the total cost of a particular sequence of actions.
        The sequence must be composed of legal moves.
        """
        util.raiseNotDefined()


def tinyMazeSearch(problem):
    """
    Returns a sequence of moves that solves tinyMaze.  For any other maze, the
    sequence of moves will be incorrect, so only use this for tinyMaze.
    """
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST
    return  [s, s, w, s, w, w, s, w]

def randomSearch(problem):
    current_state = problem.getStartState()
    list1 = []
    print "Start:", current_state
    print "Is the start a goal?", problem.isGoalState(current_state)
    print "Start's successors:", problem.getSuccessors2(current_state)
    while (problem.isGoalState(current_state) == False):
        successors = problem.getSuccessors(current_state)
        random_successor = random.choice(successors)
        current_state = random_successor[0]
        list1.append(random_successor[1])

    return list1

class Node:
    def __init__ (self, triplet, parent):
        self.triplet = triplet
        self.parent = parent
    def getTriplet(self):
        return self.triplet
    def getParent(self):
        return self.parent
    def __cmp__(self, that):
        return cmp(self.triplet, that.getTriplet())

def depthFirstSearch(problem):
    """
    Search the deepest nodes in the search tree first.

    Your search algorithm needs to return a list of actions that reaches the
    goal. Make sure to implement a graph search algorithm.

    To get started, you might want to try some of these simple commands to
    understand the search problem that is being passed in:
    """
    
    start_position = problem.getStartState()
    print "Start:", start_position
    print "Is the start a goal?", problem.isGoalState(start_position)
    print "Start's successors:", problem.getSuccessors(start_position)

    current_node = Node((start_position, None, 0), None)
    stack = [current_node]
    visited = []

    while stack:
        current_node = stack.pop()
        current_position = current_node.getTriplet()[0]
        
        if (problem.isGoalState(current_position) == True):
            break

        if (current_node not in visited):
            visited.append(current_node)
            successors = problem.getSuccessors2(current_position)
            for successor in successors:
                successorNode = Node(successor, current_node)
                if (successorNode not in visited):
                    stack.append(successorNode)

    list2 = []
    while current_node.getParent():
        list2.append(current_node.getTriplet()[1])
        current_node = current_node.getParent()
    
    list2.reverse()
    return list2

def breadthFirstSearch(problem):
    """Search the shallowest nodes in the search tree first."""

    start_position = problem.getStartState()
    print "Start:", start_position
    print "Is the start a goal?", problem.isGoalState(start_position)
    print "Start's successors:", problem.getSuccessors(start_position)

    current_node = Node((start_position, None, 0), None)
    queue = [current_node]
    visited = []

    while queue:
        current_node = queue.pop(0)
        current_position = current_node.getTriplet()[0]
        
        if (problem.isGoalState(current_position) == True):
            break

        if (current_node not in visited):
            visited.append(current_node)
            successors = problem.getSuccessors2(current_position)
            for successor in successors:
                successorNode = Node(successor, current_node)
                if (successorNode not in visited):
                    queue.append(successorNode)

    list3 = []
    while current_node.getParent():
        list3.append(current_node.getTriplet()[1])
        current_node = current_node.getParent()
    
    list3.reverse()
    return list3

def depthLimitedSearch(problem, start_position, depth):
    """Variant of DFS, but has a certain depth until which is allowed to go"""
    """This is only a helper function for the IDS algorithm"""
    
    current_node = Node((start_position, None, 0), None)
    stack = [current_node]
    visited = []
    foundGoal = False

    while stack:
        current_node = stack.pop()
        current_position = current_node.getTriplet()[0]
        
        if (problem.isGoalState(current_position) == True):
            foundGoal = True
            break

        if (current_node not in visited):
            visited.append(current_node)
            depth -= 1
            if (depth < 0):
                return None
            successors = problem.getSuccessors2(current_position)
            for successor in successors:
                successorNode = Node(successor, current_node)
                if (successorNode not in visited):
                    stack.append(successorNode)

    list3 = []
    if (foundGoal == True):
        while current_node.getParent():
            list3.append(current_node.getTriplet()[1])
            current_node = current_node.getParent()

        list3.reverse()

    return list3

def iterativeDeepeningSearch(problem):
    """Searching level by level basically"""

    start_position = problem.getStartState()
    print "Start:", start_position
    print "Is the start a goal?", problem.isGoalState(start_position)
    print "Start's successors:", problem.getSuccessors(start_position)
    
    depth = 1
    list3 = []
    while not list3:
        list3 = depthLimitedSearch(problem, start_position, depth)
        depth += 1

    return list3
    

class Node2:
    def __init__ (self, triplet, parent, cost):
        self.triplet = triplet
        self.parent = parent
        self.cost = cost
    def getTriplet(self):
        return self.triplet
    def getParent(self):
        return self.parent
    def getCost(self):
        return self.cost
    def __cmp__(self, other):
        return cmp(self.triplet, other.getTriplet())
    def __eq__(self, other):
        return self.triplet == other.getTriplet()

def uniformCostSearch(problem):
    """Search the node of the least total cost first."""
    start_position = problem.getStartState()
    print "Start:", start_position
    print "Is the start a goal?", problem.isGoalState(start_position)
    print "Start's successors:", problem.getSuccessors(start_position)
    
    current_node = Node2((start_position, None, 0), None, 0)
    priority_queue = [current_node]
    visited = []
 
    while priority_queue:
 
        priority_queue = sorted(priority_queue, key=lambda x: x.getCost())
        current_node = priority_queue.pop(0)
        current_position = current_node.getTriplet()[0]
 
        if (problem.isGoalState(current_position) == True):
            break
 
        if (current_node not in visited):
            visited.append(current_node)
            successors = problem.getSuccessors2(current_position)
            for successor in successors:
                successorNode2 = Node2(successor, current_node, current_node.getCost() + successor[2])
                if (successorNode2 not in visited):
                    priority_queue.append(successorNode2)
    
    list4 = []
    while current_node.getParent():
        list4.append(current_node.getTriplet()[1])
        current_node = current_node.getParent()
    
    list4.reverse()
    return list4

def nullHeuristic(position, problem=None, info={}):
    """
    A heuristic function estimates the cost from the current state to the nearest
    goal in the provided SearchProblem.  This heuristic is trivial.
    """
    return 0

class Node3:
    def __init__ (self, triplet, parent, cost, costWithHeuristic):
        self.triplet = triplet
        self.parent = parent
        self.cost = cost
        self.costWithHeuristic = costWithHeuristic
    def getTriplet(self):
        return self.triplet
    def getParent(self):
        return self.parent
    def getCost(self):
        return self.cost
    def getCostWithHeuristic(self):
        return self.costWithHeuristic
    def __cmp__(self, that):
        return cmp(self.triplet, that.getTriplet())
    def __eq__(self, other):
        return self.triplet == other.getTriplet()

def aStarSearch(problem, heuristic=nullHeuristic):
    """Search the node that has the lowest combined cost and heuristic first."""
    start_position = problem.getStartState()
    print "Start:", start_position
    print "Is the start a goal?", problem.isGoalState(start_position)
    print "Start's successors:", problem.getSuccessors(start_position)
    
    current_node = Node3((start_position, None, 0), None, 0, 0)
    priority_queue = [current_node]
    visited = []
 
    while priority_queue:
 
        priority_queue = sorted(priority_queue, key=lambda x: x.getCostWithHeuristic())
        current_node = priority_queue.pop(0)
        current_position = current_node.getTriplet()[0]
 
        if (problem.isGoalState(current_position) == True):
            break
 
        if (current_node not in visited):
            visited.append(current_node)
            successors = problem.getSuccessors2(current_position)
            for successor in successors:
                successorNode3 = Node3(successor, current_node, current_node.getCost() + successor[2], current_node.getCost() + successor[2] + heuristic(successor[0], problem))
                if (successorNode3 not in visited):
                    priority_queue.append(successorNode3)
    
    list5 = []
    while current_node.getParent():
        list5.append(current_node.getTriplet()[1])
        current_node = current_node.getParent()
    
    list5.reverse()
    return list5

def weightedAStarSearch(problem, heuristic=nullHeuristic, cost_weight=1.0, heuristic_weight=2.0):
    """Search the node that has the lowest combined cost and heuristic first, but also considering the weight."""
    start_position = problem.getStartState()
    print "Start:", start_position
    print "Is the start a goal?", problem.isGoalState(start_position)
    print "Start's successors:", problem.getSuccessors(start_position)
    
    current_node = Node3((start_position, None, 0), None, 0, 0)
    priority_queue = [current_node]
    visited = []
 
    while priority_queue:
 
        priority_queue = sorted(priority_queue, key=lambda x: x.getCostWithHeuristic())
        current_node = priority_queue.pop(0)
        current_position = current_node.getTriplet()[0]
 
        if (problem.isGoalState(current_position) == True):
            break
 
        if (current_node not in visited):
            visited.append(current_node)
            successors = problem.getSuccessors2(current_position)
            for successor in successors:
                successorNode3 = Node3(successor, current_node, current_node.getCost() + successor[2], cost_weight * (current_node.getCost() + successor[2]) + heuristic_weight * heuristic(successor[0], problem))
                if (successorNode3 not in visited):
                    priority_queue.append(successorNode3)
    
    list5 = []
    while current_node.getParent():
        list5.append(current_node.getTriplet()[1])
        current_node = current_node.getParent()
    
    list5.reverse()
    return list5
    
def beamSearch(problem, heuristic=nullHeuristic, beta=60):
    """Search the first 'beta' nodes that have the lowest combined cost and heuristic."""
    start_position = problem.getStartState()
    print "Start:", start_position
    print "Is the start a goal?", problem.isGoalState(start_position)
    print "Start's successors:", problem.getSuccessors(start_position)

    current_node = Node3((start_position, None, 0), None, 0, 0)
    priority_queue = [current_node]
    visited = []

    found_goal = False
    while priority_queue and not found_goal:

        priority_queue = sorted(priority_queue, key=lambda x: x.getCostWithHeuristic())
        while len(priority_queue) > beta:
            priority_queue.pop()
        current_node = priority_queue.pop(0)
        current_position = current_node.getTriplet()[0]

        if (problem.isGoalState(current_position) == True):
            found_goal = True

        if (current_node not in visited):
            visited.append(current_node)
            successors = problem.getSuccessors2(current_position)
            for successor in successors:
                successorNode3 = Node3(successor, current_node, current_node.getCost() + successor[2], current_node.getCost() + successor[2] + heuristic(successor[0], problem))
                if (successorNode3 not in visited):
                    priority_queue.append(successorNode3)

    list6 = []
    while current_node.getParent():
        list6.append(current_node.getTriplet()[1])
        current_node = current_node.getParent()

    list6.reverse()
    return list6

def fitnessFunction(current_node):
    #in this problem, it is just the cost
    return current_node.getCost()

def hillClimbingSearch(problem): #random restart
    """Searching for the best possible neighbour"""
    start_position = problem.getStartState()
    print "Start:", start_position
    print "Is the start a goal?", problem.isGoalState(start_position)
    print "Start's successors:", problem.getSuccessors(start_position)
    wallList = problem.getAllWalls().asList()
    maximum_coordinate_x = max(wallList)[0]
    maximum_coordinate_y = max(wallList)[1]
    number_of_iterations = 0

    forbidden_positions = [(1, 1)] #add the goal position to the forbidden list of positions from which the hill-climbing algorithm cannot restart
    list7 = []
    foundGoal = False
    while (not foundGoal):

        number_of_iterations += 1
        while list7:
            list7.pop()

        current_node = None
        if number_of_iterations > 1:
            new_starting_position = None
            while True:
                random_x = random.randint(1, maximum_coordinate_x)
                random_y = random.randint(1, maximum_coordinate_y)
                new_starting_position = (random_x, random_y)
                if new_starting_position not in forbidden_positions and new_starting_position not in wallList:
                    break

            current_node = Node2((new_starting_position, None, 0), None, 0)
        else:
            current_node = Node2((start_position, None, 0), None, 0)

        visited = []
        forbidden_positions.append(current_node.getTriplet()[0])

        while True:
            current_position = current_node.getTriplet()[0]
            visited.append(current_node)
            current_fitness = fitnessFunction(current_node)

            if (problem.isGoalState(current_position) == True):
                foundGoal = True
                break

            best_fitness = 0x3f3f3f3f
            best_successor = None

            successors = problem.getSuccessors(current_position)
            for successor in successors:
                successorNode = Node2(successor, current_node, current_fitness + successor[2])
                neighbour_fitness = fitnessFunction(successorNode)
                if (neighbour_fitness < best_fitness and neighbour_fitness >= current_fitness and successorNode not in visited):
                    best_fitness = neighbour_fitness
                    best_successor = successorNode

            if best_successor is None:
                break
            else:
                current_node = best_successor
                list7.append(current_node.getTriplet()[1])

    return list7

class Population:
    def __init__ (self, listOfCoordinates, fitnessScore):
        self.listOfCoordinates = listOfCoordinates
        self.fitnessScore = fitnessScore
    def getListOfCoordinates(self):
        return self.listOfCoordinates
    def setListOfCoordinates(self, listOfCoordinates):
        self.listOfCoordinates = listOfCoordinates
    def getFitnessScore(self):
        return self.fitnessScore
    def setFitnessScore(self, fitnessScore):
        self.fitnessScore = fitnessScore
    def __cmp__(self, that):
        return cmp(self.listOfCoordinates, that.getListOfCoordinates())
    def __eq__(self, other):
        return self.listOfCoordinates == other.getListOfCoordinates()

def initializePopulation(problem):
    current_position = problem.getStartState()
    list1 = [current_position]
    while (problem.isGoalState(current_position) == False):
        successors = problem.getSuccessors(current_position)
        random_successor = random.choice(successors)
        current_position = random_successor[0]
        list1.append(current_position)

    population = Population(list1, 0)
    print list1
    return population

def evaluatePopulation(population, goal_position):
    fitness_score = 0
    for individual in population:
        if isinstance(individual, tuple) and len(individual) == 2:
            dx = abs(individual[0] - goal_position[0])
            dy = abs(individual[1] - goal_position[1])
            fitness_score += (dx + dy) - ((2 ** 0.5) - 2) * min(dx, dy)
        else:
            return 0x3f3f3f3f

    return fitness_score

def commonNeighbour(problem, element1, element2):
    successors1 = problem.getSuccessors(element1)
    successors2 = problem.getSuccessors(element2)
    for successor1 in successors1:
        for successor2 in successors2:
            if successor1[0] == successor2[0]:
                return successor1[0]

    return None

def mutation(child):
    n = len(child)
    for i in range(0, n - 3):
        if child[i] == child[i + 2]:
            new_child = []
            new_child.append(child[:i])
            new_child.append(child[(i + 2):])
            return new_child

    return child

def crossover(problem, parent1, parent2):
    childFinal = Population([], 0x3f3f3f3f)
    child = []

    coordinates1 = parent1.getListOfCoordinates()
    coordinates2 = parent2.getListOfCoordinates()
    n1 = len(coordinates1)
    n2 = len(coordinates2)
    middle1 = n1 // 2
    middle2 = n2 // 2
    index1 = middle1
    index2 = middle2
    restart = False
    second_batch = False

    best_parent_fitness = min(parent1.getFitnessScore(), parent2.getFitnessScore())

    while True:
        child = []
        if restart:
            index1 = middle1
            index2 = middle2
            restart = False
            second_batch = True

        element1 = coordinates1[index1]
        element2 = coordinates2[index2]
        while True:
            if not second_batch:
                if (index1 > 0):
                    index1 -= 1
                if (index2 < n2 - 1):
                    index2 += 1
                if index1 == 0 and index2 == n2 - 1:
                    break
            else:
                if (index1 < n1 - 1):
                    index1 += 1
                if (index2 > 0):
                    index2 -= 1
                if index1 == n1 - 1 and index2 == 0:
                    break
            element1 = coordinates1[index1]
            element2 = coordinates2[index2]
            if element1 == element2 or commonNeighbour(problem, element1, element2) is not None:
                break

        if element1 == element2:
            if not second_batch:
                child.append(coordinates1[:index1])
                child.append(coordinates2[index2:])
            else:
                child.append(coordinates1[:index2])
                child.append(coordinates2[index1:])
        else:
            neighbour = commonNeighbour(problem, element1, element2)
            if neighbour is not None:
                if not second_batch:
                    child.append(coordinates1[:index1])
                    child.append(neighbour)
                    child.append(coordinates2[index2:])
                else:
                    child.append(coordinates1[:index2])
                    child.append(neighbour)
                    child.append(coordinates2[index1:])
            else:
                if second_batch:
                    restart = True
                else:
                    return []

        if child:
            child = [item for sublist in child for item in sublist]
            if len(child) >= 3:
                child = mutation(child)
                child = [item for sublist in child for item in sublist]
                childFinal.setListOfCoordinates(child)
                child_fitness = evaluatePopulation(child, problem.goal)
                childFinal.setFitnessScore(child_fitness)
                if (child_fitness < best_parent_fitness):
                    break

    return childFinal

def geneticSearch(problem):
    """Creating populations and finding the best one by using genetic operations"""
    start_position = problem.getStartState()
    print "Start:", start_position
    print "Is the start a goal?", problem.isGoalState(start_position)
    print "Start's successors:", problem.getSuccessors(start_position)

    populations = []
    for i in range(1,6):
        populations.append(initializePopulation(problem))

    #populations.append(Population(population1,0))
    #populations.append(Population(population2,0))
    #populations.append(Population(population3,0))
    #populations.append(Population(population4,0))
    #populations.append(Population(population5,0))
    #populations.append(Population(population6,0))

    current_generation = 1
    maximum_number_of_generations = 500
    while (current_generation <= maximum_number_of_generations):

        for population in populations:
            population.setFitnessScore(evaluatePopulation(population.getListOfCoordinates(), problem.goal))

        number_of_populations = len(populations)
        if number_of_populations == 1:
            break
        maximum_number_of_combinations = number_of_populations * (number_of_populations - 1) / 2
        new_populations = []
        parent_combinations = []
        while len(new_populations) < number_of_populations:
            random_int1 = 0
            random_int2 = 0
            while True:
                random_int1 = random.randint(0, number_of_populations - 1)
                random_int2 = random.randint(0, number_of_populations - 1)
                if (random_int1 < random_int2 and (random_int1, random_int2) not in parent_combinations) or len(parent_combinations) == maximum_number_of_combinations:
                    break

            if len(parent_combinations) != maximum_number_of_combinations:
                parent_combinations.append((random_int1, random_int2))
                parent1 = populations[random_int1]
                parent2 = populations[random_int2]
                child = crossover(problem, parent1, parent2)
                if child:
                    new_populations.append(child)
            else:
                break

        if new_populations:
            populations = new_populations
            if len(populations) == 1:
                break
        else:
            break
        current_generation += 1

    list8 = []
    populations = sorted(populations, key=lambda x: x.getFitnessScore())
    population_list = populations[0].getListOfCoordinates()
    n = len(population_list)
    for i in range(0, n - 1):
        if problem.isGoalState(population_list[i]):
            break
        successors = problem.getSuccessors(population_list[i])
        for successor in successors:
            if successor[0] == population_list[i + 1]:
                list8.append(successor[1])

    return list8


# Abbreviations
rnd = randomSearch
bfs = breadthFirstSearch
dfs = depthFirstSearch
ucs = uniformCostSearch
astar = aStarSearch
wastar = weightedAStarSearch
ids = iterativeDeepeningSearch
beam = beamSearch
hill = hillClimbingSearch
gen = geneticSearch